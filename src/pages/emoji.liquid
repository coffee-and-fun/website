<!DOCTYPE html>
<html class="scroll-smooth antialiased" lang="en" data-theme="valentine">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Emoji Search & Copy - Find Any Emoji Fast | Coffee & Fun</title>
  <meta name="description" content="Search, discover, and copy emojis instantly. Clean, fast emoji finder with categories, search, and one-click copy. Find the perfect emoji for any message or post." />
  <meta name="keywords" content="emoji, emoji search, copy emoji, emoji finder, emoticons, unicode, symbols, emoji copy paste, emoji tool, Coffee and Fun" />
  <meta name="author" content="Coffee & Fun LLC" />
  <meta name="publisher" content="Coffee & Fun LLC" />
  <meta name="robots" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
  <link rel="canonical" href="https://www.coffeeandfun.com/emoji" />
  <link rel="icon" href="/assets/images/favicon.png" sizes="any" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/daisyui@4.4.24/dist/full.min.css" rel="stylesheet" />
  <script src="https://unpkg.com/vue@3"></script>
  <style>
    [v-cloak] { display: none; }
    .fade-in { animation: fadeIn 0.5s ease-in; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
    .emoji-card { transition: all 0.2s ease; user-select: none; }
    .emoji-card:hover { transform: scale(1.05); box-shadow: 0 8px 25px rgba(0,0,0,0.15); position: relative; }
    .emoji-char { font-size: 2rem; line-height: 1; cursor: pointer; }
    .copy-feedback { animation: copyPulse 0.6s ease-out; }
    @keyframes copyPulse { 0% { transform: scale(1); } 50% { transform: scale(1.2); background-color: rgb(34, 197, 94); } 100% { transform: scale(1); } }
    .search-highlight { background-color: rgba(250, 204, 21, 0.3); padding: 0 2px; border-radius: 2px; }
  </style>
</head>
<body class="bg-base-100 min-h-screen">
  <div v-cloak id="app" class="container mx-auto max-w-6xl p-6">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold mb-2">üîç Emoji Search & Copy</h1>
      <p class="text-base-content/70">Find and copy any emoji in seconds</p>
    </header>

    <div class="mb-8">
      <div class="max-w-2xl mx-auto">
        <div class="form-control">
          <div class="input-group">
            <input
              type="text"
              placeholder="Search emojis by name, category, or description..."
              class="input input-bordered w-full input-lg"
              v-model="searchQuery"
              @input="debouncedSearch"
              autofocus
            />
          
          </div>
        </div>
        <div class="text-center mt-3 text-sm text-base-content/60">
          Showing {% raw %}{{ filteredEmojis.length }}{% endraw %} of {% raw %}{{ allEmojis.length }}{% endraw %} emojis
          <span v-if="searchQuery"> for "{% raw %}{{ searchQuery }}{% endraw %}"</span>
        </div>
      </div>
    </div>

    <div class="mb-8" v-if="!searchQuery">
      <div class="flex flex-wrap justify-center gap-2 mb-6">
        <button
          v-for="category in availableGroups"
          :key="category"
          @click="selectedGroup = category"
          class="btn btn-sm"
          :class="selectedGroup === category ? 'btn-primary' : 'btn-outline btn-primary'"
        >
          {% raw %}{{ getCategoryLabel(category) }}{% endraw %}
        </button>
      </div>
    </div>

    <div v-if="showCopyFeedback" class="fixed top-20 left-1/2 transform -translate-x-1/2 z-50">
      <div class="alert alert-success shadow-lg">
        <div>
          <span class="text-2xl">{% raw %}{{ lastCopiedEmoji }}{% endraw %}</span>
          <span>Copied to clipboard!</span>
        </div>
      </div>
    </div>

    <div class="mb-8">
      <div v-if="filteredEmojis.length === 0" class="text-center py-16">
        <div class="text-6xl mb-4">üòï</div>
        <h3 class="text-xl font-semibold mb-2">No emojis found</h3>
        <p class="text-base-content/60">Try a different search term or browse by category</p>
      </div>
      <div v-else class="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-3">
        <div
          v-for="(emoji, index) in filteredEmojis"
          :key="emoji.codes"
          class="emoji-card card bg-base-200 shadow-sm hover:shadow-md cursor-pointer tooltip fade-in"
          @click="copyEmoji(emoji)"
          :style="{ animationDelay: (index * 0.02) + 's' }"
          data-tip="Click to copy"
        >
          <div class="card-body p-3 text-center">
            <div class="emoji-char mb-1">{% raw %}{{ emoji.char }}{% endraw %}</div>
            <div class="text-xs text-base-content/60 leading-tight line-clamp-2">
              {% raw %}{{ emoji.name }}{% endraw %}
            </div>
          </div>
        </div>
      </div>
    </div>

    <div v-if="!searchQuery && recentEmojis.length" class="mb-8">
      <h2 class="text-xl font-bold mb-4">‚è±Ô∏è Recently Used</h2>
      <div class="flex flex-wrap gap-3">
        <div
          v-for="emoji in recentEmojis"
          :key="'recent-' + emoji.codes"
          class="emoji-card card bg-gradient-to-r from-primary/10 to-secondary/10 border border-primary/20 shadow-sm cursor-pointer tooltip"
          @click="copyEmoji(emoji)"
          data-tip="Click to copy"
        >
          <div class="card-body p-3 text-center">
            <div class="emoji-char">{% raw %}{{ emoji.char }}{% endraw %}</div>
          </div>
        </div>
      </div>
    </div>

    <div v-if="!searchQuery" class="mb-8">
      <h2 class="text-xl font-bold mb-4">üî• Popular</h2>
      <div class="grid grid-cols-6 sm:grid-cols-8 md:grid-cols-10 lg:grid-cols-12 xl:grid-cols-12 gap-3">
        <div
          v-for="emoji in popularEmojis"
          :key="'popular-' + emoji.codes"
          class="emoji-card card bg-base-200 shadow-sm hover:shadow-md cursor-pointer tooltip"
          @click="copyEmoji(emoji)"
          data-tip="Click to copy"
        >
          <div class="card-body p-3 text-center">
            <div class="emoji-char">{% raw %}{{ emoji.char }}{% endraw %}</div>
          </div>
        </div>
      </div>
    </div>

    <footer class="text-center mt-16 text-base-content/50 text-sm">
      <p>Emoji Search & Copy ‚Ä¢ Find the perfect emoji instantly</p>
      <p>Built by Coffee & Fun LLC</p>
    </footer>
  </div>

  <script>
    const { createApp } = Vue;
    createApp({
      data() {
        return {
          allEmojis:{{  emojis | json }},
          searchQuery: '',
          selectedGroup: 'all',
          showCopyFeedback: false,
          lastCopiedEmoji: '',
          recentEmojis: [],
          searchCache: new Map(),
          displayLimit: 200,
          showMore: false,
          groupLabels: {
            all: 'üåü All',
            'Smileys & Emotion': 'üòÄ Smileys',
            'People & Body': 'üë§ People',
            'Animals & Nature': 'üê± Animals',
            'Food & Drink': 'üçï Food',
            'Travel & Places': '‚úàÔ∏è Travel',
            Activities: '‚öΩ Activities',
            Objects: 'üì± Objects',
            Symbols: '‚ù§Ô∏è Symbols',
            Flags: 'üèÅ Flags'
          }
        };
      },
      computed: {
        availableGroups() {
          return ['all', ...new Set(this.allEmojis.map(e => e.group))].filter(Boolean);
        },
        filteredEmojis() {
          const cacheKey = `${this.searchQuery}-${this.selectedGroup}`;
          if (this.searchCache.has(cacheKey)) {
            const list = this.searchCache.get(cacheKey);
            return this.showMore ? list : list.slice(0, this.displayLimit);
          }
          let list = [...this.allEmojis];
          if (this.selectedGroup !== 'all' && !this.searchQuery) list = list.filter(e => e.group === this.selectedGroup);
          if (this.searchQuery) {
            const q = this.searchQuery.toLowerCase().trim();
            if (q.length < 2) list = list.filter(e => e.name.toLowerCase().startsWith(q) || e.char === this.searchQuery);
            else {
              const words = q.split(/\s+/);
              list = list.filter(e => words.every(w => (`${e.name} ${e.group} ${e.subgroup}`.toLowerCase()).includes(w)));
              list.sort((a,b) => {
                const na=a.name.toLowerCase(),nb=b.name.toLowerCase(); if(na===q)return-1; if(nb===q)return1; if(na.startsWith(q)&&!nb.startsWith(q))return-1; if(nb.startsWith(q)&&!na.startsWith(q))return1; const ia=na.includes(q),ib=nb.includes(q); if(ia&&!ib)return-1; if(ib&&!ia)return1; return0;
              });
            }
          }
          this.searchCache.set(cacheKey, list);
          if (this.searchCache.size>50) this.searchCache.delete(this.searchCache.keys().next().value);
          return this.showMore ? list : list.slice(0, this.displayLimit);
        },
        popularEmojis() {
          const popular = ['1F602','2764','1F970','1F618','1F44D','1F525','1F4AF','1F923','1F60D'];
          return this.allEmojis.filter(e => popular.includes(e.codes)).slice(0,12);
        }
      },
      mounted() {
        this.recentEmojis=this.loadRecentEmojis();
        this.allEmojis.forEach(e=>e.searchText=`${e.name} ${e.group} ${e.subgroup}`.toLowerCase());
        const p=new URLSearchParams(window.location.search);
        if(p.get('q'))this.searchQuery=p.get('q');
      },
      methods: {
        getCategoryLabel(g){return this.groupLabels[g]||`üìÑ ${g}`;},
        debouncedSearch(){clearTimeout(this._timer);this._timer=setTimeout(()=>{this.performSearch();this.showMore=false;this.searchCache.clear()},150);},
        performSearch(){const u=new URL(window.location);this.searchQuery?u.searchParams.set('q',this.searchQuery):u.searchParams.delete('q');window.history.replaceState({},'',u);},
        clearSearch(){this.searchQuery='';this.showMore=false;this.performSearch();},
        async copyEmoji(e){try{await navigator.clipboard.writeText(e.char)}catch{this.fallbackCopyTextToClipboard(e.char);}this.lastCopiedEmoji=e.char;this.showCopyFeedback=true;setTimeout(()=>this.showCopyFeedback=false,2000);this.addToRecentEmojis(e);},
        fallbackCopyTextToClipboard(t){const ta=document.createElement('textarea');ta.value=t;document.body.appendChild(ta);ta.focus();ta.select();document.execCommand('copy');document.body.removeChild(ta);this.lastCopiedEmoji=t;this.showCopyFeedback=true;setTimeout(()=>this.showCopyFeedback=false,2000);},
        addToRecentEmojis(e){this.recentEmojis=this.recentEmojis.filter(x=>x.codes!==e.codes);this.recentEmojis.unshift(e);this.recentEmojis=this.recentEmojis.slice(0,10);this.saveRecentEmojis();},
        loadRecentEmojis(){try{const s=localStorage.getItem('recentEmojis');return s?JSON.parse(s):[]}catch{return[];}},
        saveRecentEmojis(){try{localStorage.setItem('recentEmojis',JSON.stringify(this.recentEmojis));}catch{} }
      }
    }).mount('#app');
  </script>
</body>
</html>
