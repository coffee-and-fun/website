<!DOCTYPE html>
<html class="scroll-smooth antialiased" lang="en" data-theme="retro">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    
    <!-- Primary Meta Tags -->
    <title>Free Secret Message Image Encoder - Hide Text in Images | Coffee & Fun LLC</title>
    <meta name="title" content="Free Secret Message Image Encoder - Hide Text in Images | Coffee & Fun LLC" />
    <meta name="description" content="Hide secret messages in images using steganography. Encode and decode hidden text in photos. Privacy-focused, works locally in your browser." />
    <meta name="keywords" content="steganography, hide text in image, secret message, image encoder, privacy tool, Coffee & Fun" />
    <meta name="author" content="Coffee & Fun LLC" />
    <meta name="robots" content="index, follow" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href="/secret-message-image-encoder/" />
    
    <!-- Favicon -->
    <link rel="icon" href="/assets/images/favicon.png" sizes="any" />
  
    <!-- Open Graph Meta Tags -->
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Coffee & Fun" />
    <meta property="og:title" content="Free Secret Message Image Encoder - Hide Text in Images" />
    <meta property="og:description" content="Hide secret messages in images using steganography. Encode and decode hidden text in photos. Privacy-focused, works locally in your browser." />
    <meta property="og:url" content="/secret-message-image-encoder/" />
    <meta property="og:image" content="/assets/images/social/pages/secret-message-image-encoder.png" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content="Free Secret Message Image Encoder by Coffee & Fun - Hide Text in Images" />
    <meta property="og:locale" content="en_US" />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@bycoffeeandfun" />
    <meta name="twitter:creator" content="@bycoffeeandfun" />
    <meta name="twitter:title" content="Free Secret Message Image Encoder - Hide Text in Images" />
    <meta name="twitter:description" content="Hide secret messages in images using steganography. Encode and decode hidden text in photos. Privacy-focused, works locally in your browser." />
    <meta name="twitter:image" content="/assets/images/social/pages/secret-message-image-encoder.png" />
    <meta name="twitter:image:alt" content="Free Secret Message Image Encoder by Coffee & Fun - Hide Text in Images" />
    <meta name="twitter:domain" content="coffeeandfun.com" />
    <meta name="twitter:url" content="/secret-message-image-encoder/" />
    
    <!-- PWA and Mobile Enhancement -->
    <meta name="theme-color" content="#8B4513" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#D4A574" media="(prefers-color-scheme: dark)" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="Secret Message Encoder" />
    
    <!-- Enhanced Structured Data -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@graph": [
            {
                "@type": "WebSite",
                "@id": "https://www.coffeeandfun.com/#website",
                "name": "Coffee & Fun",
                "description": "Apps, games, and digital experiences by Coffee & Fun LLC",
                "url": "https://www.coffeeandfun.com/",
                "publisher": {
                    "@id": "https://www.coffeeandfun.com/#organization"
                }
            },
            {
                "@type": "WebPage",
                "@id": "https://www.coffeeandfun.com/secret-message-image-encoder/#webpage",
                "url": "https://www.coffeeandfun.com/secret-message-image-encoder/",
                "name": "Free Secret Message Image Encoder",
                "description": "Hide secret messages in images using steganography with our privacy-focused tool.",
                "isPartOf": {
                    "@id": "https://www.coffeeandfun.com/#website"
                },
                "about": {
                    "@type": "Thing",
                    "name": "Steganography Tool"
                },
                "mainEntity": {
                    "@type": "SoftwareApplication",
                    "name": "Free Secret Message Image Encoder",
                    "description": "Privacy-focused web-based tool for hiding and revealing secret messages in images using steganography",
                    "url": "https://www.coffeeandfun.com/secret-message-image-encoder/",
                    "applicationCategory": "UtilityApplication",
                    "operatingSystem": "Web Browser",
                    "offers": {
                        "@type": "Offer",
                        "price": "0",
                        "priceCurrency": "USD"
                    },
                    "featureList": [
                        "Hide text in images",
                        "Reveal hidden messages",
                        "Automatic timestamping",
                        "Local processing",
                        "No data tracking",
                        "PNG export"
                    ]
                }
            },
            {
                "@type": "Organization",
                "@id": "https://www.coffeeandfun.com/#organization",
                "name": "Coffee & Fun LLC",
                "legalName": "Coffee & Fun LLC",
                "url": "https://www.coffeeandfun.com/",
                "logo": {
                    "@type": "ImageObject",
                    "url": "https://www.coffeeandfun.com/assets/images/logo.png",
                    "width": 512,
                    "height": 512
                },
                "description": "Digital experiences and applications company specializing in clean, user-friendly web applications.",
                "sameAs": [
                    "https://x.com/bycoffeeandfun"
                ]
            }
        ]
    }
    </script>
    
    <!-- External Libraries -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.4.24/dist/full.min.css" rel="stylesheet" type="text/css" />
    <script src="https://unpkg.com/vue@3"></script>
    
    <style>
        [v-cloak] { display: none; }
        
        .image-preview {
            max-width: 100%;
            max-height: 500px;
            object-fit: contain;
            border-radius: 12px;
        }
        
        .canvas-container {
            display: none;
        }

        .drop-zone {
            transition: all 0.3s ease;
        }

        .drop-zone:hover {
            transform: translateY(-2px);
        }

        .message-box {
            transition: all 0.2s ease;
        }

        .minimal-input:focus {
            outline: none;
            border-color: hsl(var(--p));
        }
    </style>
</head>
<body class="bg-base-100 min-h-screen">

		{% assign showDonation = false %}
		{% assign showTriviaApp = false %}
		{% assign showKeyboardModal = false %}
		{% assign showInstantApp = false %}
		{% assign showProcrastinot = false %}
		{% assign showMiddleBadge = true %}
        {% assign showTicker = false %}
        
		{% include header.liquid %}


    <div v-cloak id="app" class="container mx-auto max-w-4xl px-4 py-12">
        <!-- Header -->
        <header class="text-center mb-16">
            <h1 class="text-5xl font-bold text-base-content mb-3">Secret Message Encoder</h1>
            <p class="text-lg text-base-content/60">Hide text in images. Reveal hidden messages.</p>
        </header>

        <!-- Mode Toggle -->
        <div class="flex justify-center gap-4 mb-12">
            <button 
                @click="mode = 'encode'" 
                class="btn btn-lg"
                :class="mode === 'encode' ? 'btn-primary' : 'btn-ghost'"
            >
                Hide Message
            </button>
            <button 
                @click="mode = 'decode'" 
                class="btn btn-lg"
                :class="mode === 'decode' ? 'btn-primary' : 'btn-ghost'"
            >
                Reveal Message
            </button>
        </div>

        <!-- Encode Mode -->
        <div v-if="mode === 'encode'" class="space-y-8">
            <!-- Image Upload -->
            <div v-if="!originalImage" class="drop-zone">
                <label class="block cursor-pointer">
                    <div class="border-2 border-dashed border-base-content/20 rounded-2xl p-16 text-center hover:border-primary hover:bg-base-200/50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto mb-4 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <p class="text-xl mb-2">Drop image or click to upload</p>
                        <p class="text-sm text-base-content/50">PNG or JPG</p>
                    </div>
                    <input 
                        type="file" 
                        @change="handleImageUpload" 
                        accept="image/png,image/jpeg,image/jpg" 
                        class="hidden"
                        ref="imageInput"
                    />
                </label>
            </div>

            <!-- Image + Message Input -->
            <div v-else class="space-y-6">
                <div class="relative">
                    <img :src="originalImage" alt="Original" class="image-preview mx-auto shadow-2xl" />
                    <button 
                        @click="resetEncoder" 
                        class="absolute top-4 right-4 btn btn-circle btn-sm btn-ghost bg-base-100/80 hover:bg-base-100"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                <textarea 
                    v-model="secretMessage" 
                    placeholder="Type your secret message here..."
                    class="textarea textarea-bordered w-full h-32 text-lg minimal-input"
                    maxlength="5000"
                ></textarea>

                <div class="flex justify-between items-center text-sm text-base-content/50">
                    <span>{% raw %} {{ secretMessage.length }} {% endraw %}   / 5000</span>
                    <span>All processing is local and private</span>
                </div>

                <button 
                    @click="encodeMessage" 
                    class="btn btn-primary btn-lg btn-block"
                    :disabled="!secretMessage.trim() || processing"
                >
                    <span v-if="!processing">Encode Message</span>
                    <span v-else class="loading loading-spinner"></span>
                </button>
            </div>

            <!-- Encoded Result -->
            <div v-if="encodedImage" class="space-y-6 pt-8 border-t-2 border-base-content/10">
                <div class="text-center mb-6">
                    <div class="badge badge-success badge-lg mb-2">Message Hidden Successfully</div>
                    <p class="text-sm text-base-content/60">The image looks identical, but contains your secret message</p>
                </div>

                <img :src="encodedImage" alt="Encoded" class="image-preview mx-auto shadow-2xl" />

                <div class="flex gap-4">
                    <button 
                        @click="downloadEncodedImage" 
                        class="btn btn-success btn-lg flex-1"
                    >
                        Download Image
                    </button>
                    <button 
                        @click="resetEncoder" 
                        class="btn btn-outline btn-lg"
                    >
                        New
                    </button>
                </div>
            </div>
        </div>

        <!-- Decode Mode -->
        <div v-if="mode === 'decode'" class="space-y-8">
            <!-- Image Upload -->
            <div v-if="!decodeImage" class="drop-zone">
                <label class="block cursor-pointer">
                    <div class="border-2 border-dashed border-base-content/20 rounded-2xl p-16 text-center hover:border-primary hover:bg-base-200/50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto mb-4 text-base-content/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                        </svg>
                        <p class="text-xl mb-2">Upload image to reveal message</p>
                        <p class="text-sm text-base-content/50">PNG only</p>
                    </div>
                    <input 
                        type="file" 
                        @change="handleDecodeImageUpload" 
                        accept="image/png" 
                        class="hidden"
                        ref="decodeInput"
                    />
                </label>
            </div>

            <!-- Decode Image -->
            <div v-else class="space-y-6">
                <div class="relative">
                    <img :src="decodeImage" alt="To Decode" class="image-preview mx-auto shadow-2xl" />
                    <button 
                        @click="resetDecoder" 
                        class="absolute top-4 right-4 btn btn-circle btn-sm btn-ghost bg-base-100/80 hover:bg-base-100"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                <button 
                    @click="decodeMessage" 
                    class="btn btn-primary btn-lg btn-block"
                    :disabled="processing"
                >
                    <span v-if="!processing">Reveal Hidden Message</span>
                    <span v-else class="loading loading-spinner"></span>
                </button>
            </div>

            <!-- Decoded Result -->
            <div v-if="decodedMessage" class="space-y-6 pt-8 border-t-2 border-base-content/10">
                <div class="text-center mb-6">
                    <div class="badge badge-success badge-lg mb-2">Message Found</div>
                    <p v-if="decodedTimestamp" class="text-sm text-base-content/60">Encoded: {% raw %} {{ decodedTimestamp }} {% endraw %}</p>
                </div>

                <div class="message-box bg-base-200 rounded-2xl p-8">
                    <p class="text-lg whitespace-pre-wrap">{% raw %} {{ decodedMessage }} {% endraw %}</p>
                </div>

                <div class="flex gap-4">
                    <button 
                        @click="copyToClipboard" 
                        class="btn btn-outline btn-lg flex-1"
                    >
                        Copy Message
                    </button>
                    <button 
                        @click="resetDecoder" 
                        class="btn btn-outline btn-lg"
                    >
                        New
                    </button>
                </div>
            </div>

            <!-- Error State -->
            <div v-if="decodeError" class="alert alert-warning">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>
                <span>{% raw %} {{ decodeError }} {% endraw %}</span>
            </div>
        </div>

        <!-- Simple Footer Note -->
        <div class="text-center mt-20 pt-8 border-t border-base-content/10">
            <p class="text-sm text-base-content/50">
                Uses steganography to hide text in image pixels. PNG format required for decoding.
            </p>
        </div>

        <!-- Canvas elements (hidden) -->
        <div class="canvas-container">
            <canvas ref="encodeCanvas"></canvas>
            <canvas ref="decodeCanvas"></canvas>
        </div>
    </div>

    <script>
        const { createApp } = Vue;
        
        createApp({
            data() {
                return {
                    mode: 'encode',
                    originalImage: null,
                    encodedImage: null,
                    decodeImage: null,
                    secretMessage: '',
                    decodedMessage: '',
                    decodedTimestamp: '',
                    decodeError: '',
                    processing: false
                };
            },
            methods: {
                handleImageUpload(event) {
                    const file = event.target.files[0];
                    if (file && file.type.match('image.*')) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            this.originalImage = e.target.result;
                            this.encodedImage = null;
                        };
                        reader.readAsDataURL(file);
                    }
                },

                handleDecodeImageUpload(event) {
                    const file = event.target.files[0];
                    if (file) {
                        if (!file.type.match('image/png')) {
                            this.decodeError = 'Please upload a PNG image. Only PNG files preserve hidden messages.';
                            return;
                        }
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            this.decodeImage = e.target.result;
                            this.decodedMessage = '';
                            this.decodedTimestamp = '';
                            this.decodeError = '';
                        };
                        reader.readAsDataURL(file);
                    }
                },

                async encodeMessage() {
                    if (!this.originalImage || !this.secretMessage.trim()) return;
                    
                    this.processing = true;
                    
                    try {
                        const canvas = this.$refs.encodeCanvas;
                        const ctx = canvas.getContext('2d');
                        const img = new Image();
                        
                        img.onload = () => {
                            canvas.width = img.width;
                            canvas.height = img.height;
                            ctx.drawImage(img, 0, 0);
                            
                            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                            const data = imageData.data;
                            
                            const timestamp = new Date().toISOString();
                            const fullMessage = `${timestamp}|${this.secretMessage}`;
                            const messageWithLength = `${fullMessage.length}:${fullMessage}`;
                            
                            let binaryMessage = '';
                            for (let i = 0; i < messageWithLength.length; i++) {
                                binaryMessage += messageWithLength.charCodeAt(i).toString(2).padStart(8, '0');
                            }
                            
                            binaryMessage += '11111111111111110000000000000000';
                            
                            let messageIndex = 0;
                            for (let i = 0; i < data.length && messageIndex < binaryMessage.length; i += 4) {
                                for (let j = 0; j < 3 && messageIndex < binaryMessage.length; j++) {
                                    const bit = parseInt(binaryMessage[messageIndex]);
                                    data[i + j] = (data[i + j] & 0xFE) | bit;
                                    messageIndex++;
                                }
                            }
                            
                            ctx.putImageData(imageData, 0, 0);
                            this.encodedImage = canvas.toDataURL('image/png');
                            this.processing = false;
                        };
                        
                        img.src = this.originalImage;
                    } catch (error) {
                        console.error('Encoding error:', error);
                        alert('Error encoding message. Please try a different image.');
                        this.processing = false;
                    }
                },

                async decodeMessage() {
                    if (!this.decodeImage) return;
                    
                    this.processing = true;
                    this.decodeError = '';
                    this.decodedMessage = '';
                    this.decodedTimestamp = '';
                    
                    try {
                        const canvas = this.$refs.decodeCanvas;
                        const ctx = canvas.getContext('2d');
                        const img = new Image();
                        
                        img.onload = () => {
                            canvas.width = img.width;
                            canvas.height = img.height;
                            ctx.drawImage(img, 0, 0);
                            
                            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                            const data = imageData.data;
                            
                            let binaryMessage = '';
                            for (let i = 0; i < data.length; i += 4) {
                                for (let j = 0; j < 3; j++) {
                                    binaryMessage += (data[i + j] & 1).toString();
                                }
                            }
                            
                            let message = '';
                            for (let i = 0; i < binaryMessage.length; i += 8) {
                                const byte = binaryMessage.substr(i, 8);
                                const charCode = parseInt(byte, 2);
                                if (charCode === 0) break;
                                message += String.fromCharCode(charCode);
                            }
                            
                            const colonIndex = message.indexOf(':');
                            if (colonIndex === -1) {
                                this.decodeError = 'No hidden message found in this image.';
                                this.processing = false;
                                return;
                            }
                            
                            const messageLength = parseInt(message.substring(0, colonIndex));
                            const fullMessage = message.substring(colonIndex + 1, colonIndex + 1 + messageLength);
                            
                            const pipeIndex = fullMessage.indexOf('|');
                            if (pipeIndex !== -1) {
                                const timestamp = fullMessage.substring(0, pipeIndex);
                                this.decodedTimestamp = new Date(timestamp).toLocaleString();
                                this.decodedMessage = fullMessage.substring(pipeIndex + 1);
                            } else {
                                this.decodedMessage = fullMessage;
                            }
                            
                            if (!this.decodedMessage) {
                                this.decodeError = 'No hidden message found in this image.';
                            }
                            
                            this.processing = false;
                        };
                        
                        img.src = this.decodeImage;
                    } catch (error) {
                        console.error('Decoding error:', error);
                        this.decodeError = 'Error decoding image. This image may not contain a hidden message.';
                        this.processing = false;
                    }
                },

                downloadEncodedImage() {
                    const link = document.createElement('a');
                    link.download = `secret-message-${Date.now()}.png`;
                    link.href = this.encodedImage;
                    link.click();
                },

                copyToClipboard() {
                    navigator.clipboard.writeText(this.decodedMessage).then(() => {
                        alert('Message copied to clipboard!');
                    });
                },

                resetEncoder() {
                    this.originalImage = null;
                    this.encodedImage = null;
                    this.secretMessage = '';
                    if (this.$refs.imageInput) this.$refs.imageInput.value = '';
                },

                resetDecoder() {
                    this.decodeImage = null;
                    this.decodedMessage = '';
                    this.decodedTimestamp = '';
                    this.decodeError = '';
                    if (this.$refs.decodeInput) this.$refs.decodeInput.value = '';
                }
            }
        }).mount('#app');
    </script>

    		{% include modals.liquid %}
		{% include footer.liquid %}
</body>
</html>