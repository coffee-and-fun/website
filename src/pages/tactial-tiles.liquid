<!DOCTYPE html>
<html class="scroll-smooth antialiased" lang="en" data-theme="retro">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Play Online Tic-Tac-Toe – Emoji Multiplayer Game | Coffee & Fun LLC</title>
    
    <meta name="description" content="Challenge your friends to a fun, animated Tic-Tac-Toe game with emojis and real-time multiplayer. No account needed. Built with Vue, Tailwind, and Peer-to-Peer magic!" />
    <meta name="author" content="Coffee & Fun LLC" />
    <meta name="robots" content="index, follow" />
    <meta name="rating" content="safe for kids" />
    
    <!-- DaisyUI + Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.4.20/dist/full.min.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Vue 3 -->
    <script src="https://unpkg.com/vue@3"></script>
    
    <!-- Toast notifications -->
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    
    <!-- PeerJS for multiplayer -->
    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    
    <!-- Confetti for celebrations -->
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
    
    <style>
        [v-cloak] { display: none; }
        button { touch-action: manipulation; }
        .fade-out { opacity: 0; transition: opacity 0.3s ease; }
        .game-cell { 
            aspect-ratio: 1;
            min-height: 110px;
        }
        .winning-cell {
            animation: pulse 1s infinite;
            background: linear-gradient(45deg, #10b981, #34d399);
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
    </style>
</head>

<body class="bg-base-100 min-h-screen">
    <main id="app">
      <div class="navbar border-b-2 border-primary text-primary-content">
  

  <div class="navbar-start"><button class="btn btn-ghost text-xl">
    
  
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960"  fill="currentColor" class="h-5 w-5"><path d="M80-80v-240h240v240H80Zm280 0v-240h240v240H360Zm280 0v-240h240v240H640ZM80-360v-240h240v240H80Zm280 0v-240h240v240H360Zm280 0v-240h240v240H640ZM80-640v-240h240v240H80Zm280 0v-240h240v240H360Zm280 0v-240h240v240H640ZM240-240Zm200 0h80-80Zm280 0ZM240-440v-80 80Zm240-40Zm240 40v-80 80ZM440-720h80-80Zm280 0ZM160-160h80v-80h-80v80Zm280 0h80v-80h-80v80Zm280 0h80v-80h-80v80ZM160-440h80v-80h-80v80Zm280 0h80v-80h-80v80Zm280 0h80v-80h-80v80ZM440-720h80v-80h-80v80Zm280 0h80v-80h-80v80Z"/></svg>
  Tactial Tiles</button></div>

    <div class="navbar-center hidden lg:flex">


              <!-- Game Status -->
        
                <!-- Clean score display -->
                <div class="badge badge-lg bg-base-100 text-base-content gap-2 px-4">
                    {% raw %}{{ emojiThemes[themeIndex].X }}{% endraw %} 
                    <span class="font-bold text-primary">{% raw %}{{ score.X }}{% endraw %}</span>
                    -
                    <span class="font-bold text-secondary">{% raw %}{{ score.O }}{% endraw %}</span>
                    {% raw %}{{ emojiThemes[themeIndex].O }}{% endraw %}
                </div>
  



    </div>

    <div class="navbar-end gap-2">

  <button
                    @click="showAboutModal"
                    class="btn btn-primary gap-2"
                >
                   


<svg xmlns="http://www.w3.org/2000/svg"  class="h-5 w-5" viewBox="0 -960 960 960" fill="currentColor" ><path d="M160-120v-80h480v80H160Zm226-194L160-540l84-86 228 226-86 86Zm254-254L414-796l86-84 226 226-86 86Zm184 408L302-682l56-56 522 522-56 56Z"/></svg>
                    Rules
                </button>

  <button
                    @click="showMultiplayerModal"
                    class="btn btn-primary gap-2"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 -960 960 960" fill="currentColor">
                        <path d="m272-440 208 120 208-120-168-97v137h-80v-137l-168 97Zm168-189v-17q-44-13-72-49.5T340-780q0-58 41-99t99-41q58 0 99 41t41 99q0 48-28 84.5T520-646v17l280 161q19 11 29.5 29.5T840-398v76q0 22-10.5 40.5T800-252L520-91q-19 11-40 11t-40-11L160-252q-19-11-29.5-29.5T120-322v-76q0-22 10.5-40.5T160-468l280-161Zm0 378L200-389v67l280 162 280-162v-67L520-251q-19 11-40 11t-40-11Zm40-469q25 0 42.5-17.5T540-780q0-25-17.5-42.5T480-840q-25 0-42.5 17.5T420-780q0 25 17.5 42.5T480-720Zm0 560Z"/>
                    </svg>
                    Multiplayer
                </button>
<!--
                <button
                    @click="toggleEmojiTheme"
                    class="btn btn-accent gap-2"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 -960 960 960" fill="currentColor">
                        <path d="M480-40q-149 0-254.5-42.5T120-200q0-32 20-57.5t56-45.5l65 58q-24 8-42.5 20.5T200-200q0 26 81 53t199 27q118 0 199-27t81-53q0-12-18.5-24.5T699-245l65-58q36 20 56 45.5t20 57.5q0 75-105.5 117.5T480-40Zm0-160q-22 0-42.5-7.5T400-230L148-453q-13-11-20.5-27t-7.5-33v-80q0-17 6.5-33t19.5-27l252-235q17-16 38-24t44-8q23 0 44 8t38 24l252 235q13 11 19.5 27t6.5 33v80q0 17-7.5 33T812-453L560-230q-17 15-37.5 22.5T480-200Zm-4-188q14 0 26.5-4.5T526-407l222-197-240-226q-7-5-14-7.5t-15-2.5q-8 0-15 2.5t-12 7.5L208-600l218 193q11 10 23.5 14.5T476-388ZM360-550q21 0 35.5-14.5T410-600q0-21-14.5-35.5T360-650q-21 0-35.5 14.5T310-600q0 21 14.5 35.5T360-550Zm50 54q43 21 90.5 13.5T584-522q34-29 44.5-73T618-678L410-496Zm70-174q21 0 35.5-14.5T530-720q0-21-14.5-35.5T480-770q-21 0-35.5 14.5T430-720q0 21 14.5 35.5T480-670Zm-2 56Z"/>
                    </svg>
                    Themes
                </button>

                --->
  </div>

</div>
        <div v-cloak class="max-w-xl mx-auto space-y-6 px-4 py-8">

        
         

  

            <!-- Game Board -->
            <div class="card">
                <div class="card-body p-4">
                    <div class="grid grid-cols-3 gap-8">
                        <button
                            v-for="(cell, index) in cells"
                            :key="index"
                            @click="makeMove(index)"
class="btn game-cell mx-auto text-4xl font-bold transition-all duration-200 hover:scale-105 flex items-center justify-center"

                            :class="{
                                'winning-cell': winner && winningCombo.includes(index),
                                'btn-disabled': !isMyTurn || cell,
                                'btn-primary': !cell && isMyTurn,
                                'btn-ghost': cell
                            }"
                            :disabled="!isMyTurn || cell"
                        >
                            {% raw %}{{ getEmoji(cell) }}{% endraw %}
                        </button>
                    </div>
                </div>
            </div>


             <!-- Control Buttons -->
            <div class="flex flex-wrap gap-2 justify-center my-8">
                <button
                    v-if="gameOver"
                    @click="resetGame"
                    class="btn btn-success btn-block gap-2"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 -960 960 960" fill="currentColor">
                        <path d="M482-160q-134 0-228-93t-94-227v-7l-64 64-56-56 160-160 160 160-56 56-64-64v7q0 100 70.5 170T482-240q26 0 51-6t49-18l60 60q-38 22-78 33t-82 11Zm278-161L600-481l56-56 64 64v-7q0-100-70.5-170T478-720q-26 0-51 6t-49 18l-60-60q38-22 78-33t82-11q134 0 228 93t94 227v7l64-64 56 56-160 160Z"/>
                    </svg>
                    New Game
                </button>

               
            </div>
        
            <!-- Power-ups (Always visible) -->

                              <h2 class="text-2xl font-bold text-lect mb-4 text-primary-content mt-12 pt-12">
                                Power-ups
                              </h2>
            <hr class="my-4 border-t-2 border-primary" />
            <div class="flex gap-4 justify-evenly items-center mb-6">
                <!-- Undo Power-up -->
                <div class="tooltip tooltip-top" data-tip="Undo last move">
                    <button
                        @click="undoMove"
                        class="btn btn-circle btn-warning"
                        :class="{
                            'btn-disabled opacity-50': hasUsedUndo[currentPlayer] || moveHistory.length === 0 || gameOver
                        }"
                        :disabled="hasUsedUndo[currentPlayer] || moveHistory.length === 0 || gameOver"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 -960 960 960" fill="currentColor">
                            <path d="m313-440 224 224-57 56-320-320 320-320 57 56-224 224h487v80H313Z"/>
                        </svg>
                    </button>
                </div>


                     <div class="tooltip tooltip-top" data-tip="Swap Pieces">
                    <button
                       @click="showSwapPowerModal"
                        class="btn btn-circle btn-warning"
                        :class="{
                            'btn-disabled opacity-50': hasUsedSwap[currentPlayer] || moveHistory.length === 0 || gameOver
                        }"
                        :disabled="hasUsedSwap[currentPlayer] || moveHistory.length === 0 || gameOver"
                    >
                     


<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 -960 960 960" fill="currentColor"><path d="m320-160-56-57 103-103H80v-80h287L264-503l56-57 200 200-200 200Zm320-240L440-600l200-200 56 57-103 103h287v80H593l103 103-56 57Z"/></svg>

                    </button>
                </div>
                
                <!-- Remove Power-up -->
                <div class="tooltip tooltip-top" data-tip="Remove a piece">
                    <button
                        @click="showRemovePowerModal"
                        class="btn btn-circle btn-error"
                        :class="{
                            'btn-disabled opacity-50': hasUsedRemove[currentPlayer] || !cells.some(cell => cell !== null) || gameOver
                        }"
                        :disabled="hasUsedRemove[currentPlayer] || !cells.some(cell => cell !== null) || gameOver"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 -960 960 960" fill="currentColor">
                            <path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"/>
                        </svg>
                    </button>
                </div>
            </div>


           

 <!-- Swap Piece Modal -->
            <dialog id="swap-modal" class="modal">
                <div class="modal-box">
                    <h3 class="font-bold text-lg mb-4">🔄 Swap Two Pieces</h3>
                    <p class="text-sm text-base-content/70 mb-4">
                        Click on two pieces to swap their positions:
                    </p>
                    <p class="text-xs text-info mb-4" v-if="swapSelection.length === 1">
                        Selected: {% raw %} {{ getEmoji(cells[swapSelection[0]]) }} {% endraw %} - Now pick a second piece to swap with
                    </p>
                    
                    <div class="grid grid-cols-3 gap-4 mb-4">
                        <button
                            v-for="(cell, index) in cells"
                            :key="index"
                            @click="selectSwapPiece(index)"
                            class="btn game-cell mx-auto text-4xl font-bold transition-all duration-200 hover:scale-105 flex items-center justify-center"
                            :class="{
                                'btn-info': swapSelection.includes(index),
                                'btn-secondary': cell !== null && !swapSelection.includes(index),
                                'btn-ghost': !cell,
                                'btn-disabled': !cell
                            }"
                            :disabled="!cell"
                        >
                            {% raw %}{{ getEmoji(cell) }}{% endraw %}
                        </button>
                    </div>

                    <div class="modal-action">
                        <form method="dialog">
                            <button class="btn" @click="resetSwapSelection">Cancel</button>
                        </form>
                    </div>
                </div>
                <form method="dialog" class="modal-backdrop">
                    <button @click="resetSwapSelection">close</button>
                </form>
            </dialog>

<!-- About Modal -->
<dialog id="about-modal" class="modal">
    <div class="modal-box max-w-2xl">
        <h3 class="font-bold text-2xl mb-6 text-center">🎮 About Tactical Tiles</h3>
        
        <div class="space-y-6">
            <!-- What makes it different -->
            <div>
                <h4 class="font-bold text-lg mb-3 text-primary">🚀 What Makes This Different?</h4>
                <div class="space-y-2 text-base-content/80">
                    <p>• <strong>Real-time multiplayer</strong> - Play instantly with friends anywhere in the world</p>
                    <p>• <strong>Power-ups</strong> - Strategic abilities to turn the tide of battle</p>
                    <p>• <strong>Customizable themes</strong> - Choose from fun emoji pairs like 🐶 vs 🐱</p>
                    <p>• <strong>No registration required</strong> - Just share a link and start playing</p>
                    <p>• <strong>Cross-platform</strong> - Works on phones, tablets, and computers</p>
                </div>
            </div>

            <!-- How to play -->
            <div>
                <h4 class="font-bold text-lg mb-3 text-secondary">📋 How to Play</h4>
                <div class="space-y-3">
                    <div>
                        <h5 class="font-semibold text-base mb-1">Basic Rules:</h5>
                        <div class="text-base-content/80 space-y-1">
                            <p>• Take turns placing your emoji on the 3×3 grid</p>
                            <p>• Get three in a row (horizontal, vertical, or diagonal) to win</p>
                            <p>• If all 12 spaces are filled without a winner, it's a draw</p>
                        </div>
                    </div>
                    
                    <div>
                        <h5 class="font-semibold text-base mb-1">Single Player:</h5>
                        <p class="text-base-content/80">• Play against yourself or use it to practice strategies</p>
                    </div>
                    
                    <div>
                        <h5 class="font-semibold text-base mb-1">Multiplayer:</h5>
                        <div class="text-base-content/80 space-y-1">
                            <p>• Click "Multiplayer" to create a game or join one</p>
                            <p>• Share the invite link with your friend</p>
                            <p>• Host plays as ❌ (or first emoji), guest plays as ⭕ (or second emoji)</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Power-ups -->
            <div>
                <h4 class="font-bold text-lg mb-3 text-warning">⚡ Power-ups</h4>
                <div class="space-y-2">
                    <div class="flex items-start gap-3">
                        <div class="badge badge-warning badge-sm mt-1">UNDO</div>
                        <div class="text-base-content/80">
                            <strong>Undo Move:</strong> Take back your last move. Each player gets one undo per game.
                        </div>
                    </div>
                    <div class="flex items-start gap-3">
                        <div class="badge badge-info badge-sm mt-1">SWAP</div>
                        <div class="text-base-content/80">
                            <strong>Swap Piece:</strong> Swap two pieces on the board. Each player gets one swap per game.
                        </div>
                    </div>

                        <div class="flex items-start gap-3">
                        <div class="badge badge-error badge-sm mt-1">REMOVE</div>
                        <div class="text-base-content/80">
                            <strong>Remove Piece:</strong> Eliminate a piece from the board. Each player gets one removal per game.
                        </div>
                    </div>
                    <div class="alert alert-info mt-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-5 w-5" fill="none" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span class="text-sm">Power-ups add strategy! Use them wisely - you only get one of each per game.</span>
                    </div>
                </div>
            </div>

            <!-- Tips -->
            <div>
                <h4 class="font-bold text-lg mb-3 text-accent">💡 Pro Tips</h4>
                <div class="space-y-2 text-base-content/80">
                    <p>• <strong>Control the center:</strong> The middle square gives you the most winning opportunities</p>
                    <p>• <strong>Block and build:</strong> Always block your opponent's winning moves</p>
                    <p>• <strong>Think ahead:</strong> Look for moves that create multiple winning threats</p>
                    <p>• <strong>Save power-ups:</strong> Don't use them too early - wait for the perfect moment</p>
                    <p>• <strong>Corner strategy:</strong> If you can't get the center, corners are your next best bet</p>
                </div>
            </div>

            <!-- Fun facts -->
            <div class="bg-base-200 p-4 rounded-lg">
                <h4 class="font-bold text-lg mb-2">🎯 Fun Facts</h4>
                <div class="text-sm text-base-content/70 space-y-1">
                    <p>• Tic-tac-toe has been played for over 2,000 years</p>
                    <p>• A perfect game always ends in a draw</p>
                    <p>• There are 255,168 possible game states</p>
                    <p>• This version adds power-ups to break the "always draw" rule!</p>
                </div>
            </div>
        </div>

        <div class="modal-action">
            <form method="dialog">
                <button class="btn btn-primary">Got it, let's play! 🎮</button>
            </form>
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>


            <!-- Multiplayer Modal -->
            <dialog id="multiplayer-modal" class="modal">
                <div class="modal-box">
                    <h3 class="font-bold text-lg mb-4">🌐 Multiplayer Game</h3>
                    
                    <div class="space-y-4">
                        <button
                            @click="createGame"
                            class="btn btn-primary btn-block gap-2"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            Create New Game
                        </button>

                        <div v-if="peerId" class="space-y-2">
                            <p class="text-sm text-base-content/70">Game created! Share this link:</p>
                            <button
                                @click="copyPeerIdToClipboard"
                                class="btn btn-outline btn-block gap-2"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 -960 960 960" fill="currentColor">
                                    <path d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"/>
                                </svg>
                                Copy Invite Link
                            </button>
                        </div>

                        <div class="divider">OR</div>

                        <div class="space-y-2">
                            <label class="label">
                                <span class="label-text">Join existing game:</span>
                            </label>
                            <div class="join w-full">
                                <input
                                    v-model="peerIdToConnect"
                                    placeholder="Enter game ID"
                                    class="input input-bordered join-item flex-1"
                                />
                                <button
                                    @click="connectToPeer"
                                    class="btn btn-primary join-item"
                                    :disabled="!peerIdToConnect.trim()"
                                >
                                    Join
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="modal-action">
                        <form method="dialog">
                            <button class="btn">Close</button>
                        </form>
                    </div>
                </div>
                <form method="dialog" class="modal-backdrop">
                    <button>close</button>
                </form>
            </dialog>

            <!-- Remove Piece Modal -->
            <dialog id="remove-modal" class="modal">
                <div class="modal-box">
                    <h3 class="font-bold text-lg mb-4">🗑️ Remove a Piece</h3>
                    <p class="text-sm text-base-content/70 mb-4">
                        <span v-if="isMultiplayer">Click on an opponent's piece to remove it:</span>
                        <span v-else>Click on any piece to remove it:</span>
                    </p>
                    
                    <div class="grid grid-cols-3 gap-8 mb-4">
                        <button
                            v-for="(cell, index) in cells"
                            :key="index"
                            @click="removeOpponentPiece(index)"
class="btn game-cell mx-auto text-4xl font-bold transition-all duration-200 hover:scale-105 flex items-center justify-center"


                            :class="{
                                'btn-error': isMultiplayer ? cell === (currentPlayer === 'X' ? 'O' : 'X') : cell !== null,
                                'btn-ghost': !cell,
                                'btn-disabled': !cell || (isMultiplayer && cell === currentPlayer)
                            }"
                            :disabled="!cell || (isMultiplayer && cell === currentPlayer)"
                        >
                            {% raw %}{{ getEmoji(cell) }}{% endraw %}
                        </button>
                    </div>

                    <div class="modal-action">
                        <form method="dialog">
                            <button class="btn">Cancel</button>
                        </form>
                    </div>
                </div>
                <form method="dialog" class="modal-backdrop">
                    <button>close</button>
                </form>
            </dialog>
        </div>
    </main>

   <script>
        const { createApp } = Vue;

        const app = createApp({
            data() {
                return {
                    cells: Array(12).fill(null),
                    moveHistory: [],
                    currentPlayer: "X",
                    winner: null,
                    isDraw: false,
                    winningCombo: [],
                    score: { X: 0, O: 0 },
                    emojiThemes: [
                        { X: "❌", O: "⭕" },
                        { X: "🐶", O: "🐱" },
                        { X: "🍕", O: "🍔" },
                        { X: "🦄", O: "🐉" },
                        { X: "🌟", O: "🌙" },
                        { X: "🔥", O: "❄️" }
                    ],
                    themeIndex: 0,
                    peer: null,
                    conn: null,
                    peerId: "",
                    peerIdToConnect: "",
                    isHost: false,
                    hasUsedUndo: { X: false, O: false },
                    hasUsedRemove: { X: false, O: false },
                    hasUsedSwap: { X: false, O: false },
                    swapSelection: [],
                    showRemoveMode: false,
                };
            },
            computed: {
                isMultiplayer() {
                    return this.conn !== null;
                },
                emojiSet() {
                    return this.emojiThemes[this.themeIndex];
                },
                isMyTurn() {
                    if (!this.conn) return true;
                    return (
                        (this.isHost && this.currentPlayer === "X") ||
                        (!this.isHost && this.currentPlayer === "O")
                    );
                },
                gameOver() {
                    return this.winner || this.isDraw;
                },
            },
            watch: {
                isMyTurn(newVal) {
                    if (newVal && !this.winner && !this.isDraw && this.isMultiplayer) {
                        this.toaster("🎯 Your turn!", "info", 2000);
                    }
                },
                score: {
                    handler(val) {
                        localStorage.setItem("tictactoe-score", JSON.stringify(val));
                    },
                    deep: true,
                },
                // Watch for game start to show initial status
                currentPlayer: {
                    handler(newPlayer) {
                        // Only show turn notification if game just started and it's not the first load
                        if (this.cells.every(cell => cell === null) && this.moveHistory.length === 0) {
                            setTimeout(() => {
                                if (!this.winner && !this.isDraw) {
                                    this.toaster(`${this.getEmoji(newPlayer)} goes first!`, "info", 2000);
                                }
                            }, 500);
                        }
                    },
                    immediate: false
                }
            },
            mounted() {
                const saved = JSON.parse(localStorage.getItem("tictactoe-score"));
                if (saved) this.score = saved;

                const gameId = this.getUrlParameter("gameId");
                if (gameId) {
                    this.peerIdToConnect = gameId;
                    this.connectToPeer();
                }

                // Show initial game status
                setTimeout(() => {
                    this.toaster(`${this.getEmoji(this.currentPlayer)} goes first!`, "info", 2000);
                }, 1000);
            },
            methods: {
                showMultiplayerModal() {
                    document.getElementById('multiplayer-modal').showModal();
                },
                showAboutModal() {
                    document.getElementById('about-modal').showModal();
                },
                showSwapPowerModal() {
                    this.swapSelection = [];
                    document.getElementById('swap-modal').showModal();
                },
                      selectSwapPiece(index) {
                    if (this.cells[index] === null) return;
                    
                    if (this.swapSelection.includes(index)) {
                        // Deselect if already selected
                        this.swapSelection = this.swapSelection.filter(i => i !== index);
                    } else if (this.swapSelection.length < 2) {
                        // Select piece
                        this.swapSelection.push(index);
                        
                        // If we have 2 pieces selected, perform the swap
                        if (this.swapSelection.length === 2) {
                            this.performSwap();
                        }
                    }
                },
                performSwap() {
                    if (this.swapSelection.length !== 2) return;
                    
                    const [index1, index2] = this.swapSelection;
                    
                    // Swap the pieces
                    const temp = this.cells[index1];
                    this.cells[index1] = this.cells[index2];
                    this.cells[index2] = temp;
                    
                    // Mark power-up as used
                    this.hasUsedSwap[this.currentPlayer] = true;
                    
                    // Close modal and reset selection
                    document.getElementById('swap-modal').close();
                    this.resetSwapSelection();
                    
                    // Show notification
                    this.toaster(
                        `${this.getEmoji(this.currentPlayer)} swapped two pieces!`,
                        "info"
                    );
                    
                    // Check if this created a winning condition
                    this.checkGameState();
                    
                    // Send to multiplayer opponent
                    if (this.conn && this.conn.open) {
                        this.conn.send({
                            type: "swap",
                            cells: [...this.cells],
                            currentPlayer: this.currentPlayer,
                            hasUsedSwap: { ...this.hasUsedSwap },
                            winner: this.winner,
                            isDraw: this.isDraw,
                            winningCombo: [...this.winningCombo],
                        });
                    }
                },
                resetSwapSelection() {
                    this.swapSelection = [];
                },
                showRemovePowerModal() {
                    document.getElementById('remove-modal').showModal();
                },
                removeOpponentPiece(index) {
                    const opponent = this.currentPlayer === "X" ? "O" : "X";
                    if (this.hasUsedRemove[this.currentPlayer]) return;
                    
                    // In single player, allow removing any piece. In multiplayer, only opponent pieces
                    if (this.isMultiplayer && this.cells[index] !== opponent) return;
                    if (!this.isMultiplayer && this.cells[index] === null) return;

                    this.cells[index] = null;
                    this.hasUsedRemove[this.currentPlayer] = true;
                    
                    document.getElementById('remove-modal').close();
                    
                    this.toaster(
                        `${this.getEmoji(this.currentPlayer)} removed a piece!`,
                        "warning"
                    );

                    if (this.conn && this.conn.open) {
                        this.conn.send({
                            type: "remove",
                            cells: [...this.cells],
                            currentPlayer: this.currentPlayer,
                            hasUsedRemove: { ...this.hasUsedRemove },
                        });
                    }
                },
                undoMove() {
                    const last = this.moveHistory.pop();
                    if (!last || this.hasUsedUndo[last.player]) return;
                    
                    this.cells[last.index] = null;
                    this.winner = null;
                    this.isDraw = false;
                    this.winningCombo = [];
                    this.currentPlayer = last.player;
                    this.hasUsedUndo[last.player] = true;
                    
                    this.toaster(
                        `${this.getEmoji(last.player)} undid their last move!`,
                        "warning"
                    );
                    
                    if (this.conn && this.conn.open) {
                        this.conn.send({
                            type: "undo",
                            cells: [...this.cells],
                            currentPlayer: this.currentPlayer,
                            winner: this.winner,
                            isDraw: this.isDraw,
                            winningCombo: [...this.winningCombo],
                            moveHistory: [...this.moveHistory],
                            hasUsedUndo: { ...this.hasUsedUndo },
                        });
                    }
                },
                toaster(msg, type = "info", duration = 3000) {
                    const colors = {
                        info: "#3b82f6",
                        success: "#10b981", 
                        warning: "#f59e0b",
                        error: "#ef4444"
                    };
                    
                    window.Toastify({
                        text: msg,
                        duration: duration,
                        gravity: "bottom",
                        position: "center",
                        backgroundColor: colors[type],
                        className: "rounded-full shadow-lg",
                        stopOnFocus: true,
                    }).showToast();
                },
                getEmoji(val) {
                    return this.emojiSet[val] || "";
                },
                toggleEmojiTheme() {
                    this.themeIndex = (this.themeIndex + 1) % this.emojiThemes.length;
                    this.toaster(`Theme changed to ${this.emojiSet.X} vs ${this.emojiSet.O}!`, "info");
                },
                setupConnection() {
                    this.conn.on("open", () => {
                        console.log("Connection opened");
                        this.toaster("Connection established!", "success");
                    });

                    this.conn.on("data", (data) => {
                        console.log("Received data:", data);
                        if (data.type === "move") {
                            this.cells = [...data.cells];
                            this.currentPlayer = data.currentPlayer;
                            this.winner = data.winner;
                            this.isDraw = data.isDraw;
                            this.winningCombo = [...(data.winningCombo || [])];
                            this.score = { ...data.score };
                            this.moveHistory = [...(data.moveHistory || [])];
                            this.hasUsedUndo = { ...data.hasUsedUndo };
                            this.hasUsedRemove = { ...data.hasUsedRemove };
                            this.toaster("Opponent moved!", "info", 1500);
                        } else if (data.type === "reset") {
                            this.resetGame(false);
                        } else if (data.type === "undo") {
                            this.cells = [...data.cells];
                            this.currentPlayer = data.currentPlayer;
                            this.winner = data.winner;
                            this.isDraw = data.isDraw;
                            this.winningCombo = [...(data.winningCombo || [])];
                            this.moveHistory = [...(data.moveHistory || [])];
                            this.hasUsedUndo = { ...data.hasUsedUndo };
                            this.toaster("Opponent used undo!", "warning");
                        } else if (data.type === "remove") {
                            this.cells = [...data.cells];
                            this.currentPlayer = data.currentPlayer;
                            this.hasUsedRemove = { ...data.hasUsedRemove };
                            this.toaster("Opponent removed a piece!", "warning");
                        } else if (data.type === "swap") {
                            this.cells = [...data.cells];
                            this.currentPlayer = data.currentPlayer;
                            this.hasUsedSwap = { ...data.hasUsedSwap };
                            this.winner = data.winner;
                            this.isDraw = data.isDraw;
                            this.winningCombo = [...(data.winningCombo || [])];
                            this.toaster("Opponent used swap!", "info");
                        }
                    });
                    
                    this.conn.on("close", () => {
                        console.log("Connection closed");
                        this.toaster("Player disconnected", "error");
                        this.conn = null;
                    });

                    this.conn.on("error", (err) => {
                        console.error("Connection error:", err);
                        this.toaster("Connection error occurred", "error");
                    });
                },
                createGame() {
                    this.isHost = true;
                    this.peer = new Peer();
                    
                    this.peer.on("open", (id) => {
                        this.peerId = id;
                        this.toaster("Game created! Share the invite link.", "success");
                    });
                    
                    this.peer.on("connection", (connection) => {
                        this.conn = connection;
                        this.setupConnection();
                        this.toaster("Player joined the game!", "success");
                        document.getElementById('multiplayer-modal').close();
                    });
                },
                getUrlParameter(name) {
                    const params = new URLSearchParams(window.location.search);
                    return params.get(name);
                },
                connectToPeer() {
                    if (!this.peerIdToConnect.trim()) return;
                    
                    this.isHost = false;
                    this.peer = new Peer();
                    
                    this.peer.on("open", () => {
                        console.log("Peer opened, connecting to:", this.peerIdToConnect);
                        this.conn = this.peer.connect(this.peerIdToConnect);
                        
                        this.conn.on("open", () => {
                            console.log("Connected to host!");
                            this.setupConnection();
                            this.toaster("Connected to host!", "success");
                            document.getElementById('multiplayer-modal').close();
                        });
                        
                        this.conn.on("error", (err) => {
                            console.error("Connection error:", err);
                            this.toaster("Failed to connect to game", "error");
                        });
                    });

                    this.peer.on("error", (err) => {
                        console.error("Peer error:", err);
                        this.toaster("Failed to initialize connection", "error");
                    });
                },
                copyPeerIdToClipboard() {
                    const link = `${window.location.origin}${window.location.pathname}?gameId=${this.peerId}`;
                    
                    navigator.clipboard
                        .writeText(link)
                        .then(() => {
                            this.toaster("Invite link copied to clipboard!", "success");
                        })
                        .catch(() => {
                            this.toaster("Failed to copy link", "error");
                        });
                },
                makeMove(index) {
                    if (this.cells[index] || this.winner || this.isDraw || !this.isMyTurn) return;
                    
                    console.log("Making move at index:", index, "Current player:", this.currentPlayer);
                    
                    this.moveHistory.push({ index, player: this.currentPlayer });
                    this.cells[index] = this.currentPlayer;
                    this.checkGameState();
                    
                    if (!this.winner && !this.isDraw) {
                        this.currentPlayer = this.currentPlayer === "X" ? "O" : "X";
                        // Show whose turn it is next (only in single player or for the current player in multiplayer)
                        if (!this.isMultiplayer || this.isMyTurn) {
                            this.toaster(`${this.getEmoji(this.currentPlayer)}'s turn`, "info", 1500);
                        }
                    }
                    
                    if (this.conn) {
                        const moveData = {
                            type: "move",
                            cells: [...this.cells],
                            currentPlayer: this.currentPlayer,
                            winner: this.winner,
                            isDraw: this.isDraw,
                            winningCombo: [...this.winningCombo],
                            score: { ...this.score },
                            moveHistory: [...this.moveHistory],
                            hasUsedUndo: { ...this.hasUsedUndo },
                            hasUsedRemove: { ...this.hasUsedRemove },
                        };
                        console.log("Sending move data:", moveData);
                        this.conn.send(moveData);
                    } else {
                        console.log("No connection available to send move");
                    }
                },
                checkGameState() {
                    const wins = [
                        [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                        [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                        [0, 4, 8], [2, 4, 6], // diagonals
                    ];
                    
                    for (let combo of wins) {
                        const [a, b, c] = combo;
                        if (
                            this.cells[a] &&
                            this.cells[a] === this.cells[b] &&
                            this.cells[a] === this.cells[c]
                        ) {
                            this.winner = this.cells[a];
                            this.winningCombo = combo;
                            this.score[this.winner]++;
                            this.toaster(`🏆 ${this.getEmoji(this.winner)} wins!`, "success", 5000);
                            this.celebrationFireworks();
                            return;
                        }
                    }
                    
                    if (!this.cells.includes(null)) {
                        this.isDraw = true;
                        this.toaster("🤝 It's a draw!", "warning", 4000);
                    }
                },
                celebrationFireworks() {
                    if (typeof confetti === 'undefined') return;
                    
                    const duration = 3000;
                    const animationEnd = Date.now() + duration;
                    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

                    function randomInRange(min, max) {
                        return Math.random() * (max - min) + min;
                    }

                    const interval = setInterval(() => {
                        const timeLeft = animationEnd - Date.now();

                        if (timeLeft <= 0) {
                            return clearInterval(interval);
                        }

                        const particleCount = 50 * (timeLeft / duration);
                        confetti({
                            ...defaults,
                            particleCount,
                            origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
                        });
                        confetti({
                            ...defaults,
                            particleCount,
                            origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
                        });
                    }, 250);
                },
                resetGame(sync = true) {
                    const gameBoard = document.querySelector(".grid");
                    if (gameBoard) gameBoard.classList.add("fade-out");

                    setTimeout(() => {
                        this.cells = Array(12).fill(null);
                        this.moveHistory = [];
                        this.currentPlayer = "X";
                        this.winner = null;
                        this.isDraw = false;
                        this.winningCombo = [];
                        this.hasUsedUndo = { X: false, O: false };
                        this.hasUsedRemove = { X: false, O: false };
                        
                        if (gameBoard) gameBoard.classList.remove("fade-out");
                        
                        this.toaster("New game started!", "info");
                        setTimeout(() => {
                            this.toaster(`${this.getEmoji(this.currentPlayer)} goes first!`, "info", 2000);
                        }, 500);
                        
                        if (sync && this.conn && this.conn.open) {
                            this.conn.send({ type: "reset" });
                        }
                    }, 300);
                },
            },
        });

        app.mount("#app");
    </script>
</body>
</html>