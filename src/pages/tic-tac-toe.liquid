<!DOCTYPE html>
<html
  class="brand-color-background scroll-smooth antialiased"
  lang="en"
  data-theme="light"
>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Play Online Tic-Tac-Toe ‚Äì Emoji Multiplayer Game | Coffee & Fun LLC</title>

 
    <meta
      name="description"
      content="Challenge your friends to a fun, animated Tic-Tac-Toe game with emojis and real-time multiplayer. No account needed. Built with Vue, Tailwind, and Peer-to-Peer magic!"
    />
    <meta name="author" content="Coffee & Fun LLC" />
    <meta name="robots" content="index, follow" />
    <meta name="rating" content="safe for kids" />

    <link rel="icon" href="/assets/images/favicon.png" />

    <meta
      name="title"
      content="Play Online Tic-Tac-Toe ‚Äì Emoji Multiplayer Game | Coffee & Fun LLC"
    />
    <!-- PWA Manifest -->
    <link rel="manifest" href="/assets/images/social/site.webmanifest" />

    <!-- Theme & Mobile Meta -->
    <meta name="theme-color" content="#fef5ec" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />

    <!-- Icons -->
    <link rel="apple-touch-icon" href="/assets/images/social/192.png" />
    <link
      rel="icon"
      href="/assets/images/social/192.png"
      sizes="192x192"
      type="image/png"
    />
    <!-- PWA Meta Tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <meta name="mobile-web-app-capable" content="yes" />

    <!-- Open Graph Meta Tags -->
    <meta
      property="og:title"
      content="Play Online Tic-Tac-Toe ‚Äì Emoji Multiplayer Game | Coffee & Fun LLC"
    />
    <meta property="og:site_name" content="Coffee & Fun" />
    <meta property="og:url" content="https://www.coffeeandfun.com/" />
    <meta
      property="og:description"
      content="Challenge your friends to a fun, animated Tic-Tac-Toe game with emojis and real-time multiplayer. No account needed. Built with Vue, Tailwind, and Peer-to-Peer magic!"
    />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/assets/images/apps/coco.png" />

    <!-- Twitter Meta Tags -->
    <meta property="twitter:domain" content="coffeeandfun.com" />
    <meta property="twitter:url" content="https://www.coffeeandfun.com" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta
      name="twitter:title"
      content="Play Online Tic-Tac-Toe ‚Äì Emoji Multiplayer Game | Coffee & Fun LLC"
    />
    <meta name="twitter:site" content="@bycoffeeandfun" />
    <meta
      name="twitter:description"
      content="Challenge your friends to a fun, animated Tic-Tac-Toe game with emojis and real-time multiplayer. No account needed. Built with Vue, Tailwind, and Peer-to-Peer magic!"
    />
    <meta
      name="twitter:image"
      content="https://www.coffeeandfun.com/assets/images/apps/coco.png"
    />
    <meta name="twitter:image:alt" content=" Coffee & Fun" />

    <script type="application/ld+json">
      {
        "@context": "http://schema.org/",
        "@type": "WebSite",
        "url": "https://www.coffeeandfun.com",
        "potentialAction": {
          "@type": "SearchAction",
          "target": "{search_term_string}",
          "query-input": "required name=search_term_string"
        }
      }
    </script>
    {% bundledCss %}

    <style>
  [v-cloak] { display: none; }
  button {
    touch-action: manipulation;
  }
</style>
    <script>
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker.getRegistrations().then((registrations) => {
          for (const registration of registrations) {
            registration.unregister().then(() => {
              console.log("üßπ Old service worker unregistered");
            });
          }

          // After clearing, register the new one
          navigator.serviceWorker
            .register("/service-worker.js")
            .then(() => console.log("‚úÖ New service worker registered"))
            .catch((err) => console.log("Service worker error:", err));
        });
      }
    </script>

    <script src="https://unpkg.com/vue@3"></script>
    <script src="https://unpkg.com/hotkeys-js/dist/hotkeys.min.js"></script>
     <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>

    <script>
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker.register("/service-worker.js");
      }
    </script>

    <style>
      @keyframes ticker {
        0% {
          transform: translateX(100%);
        }

        100% {
          transform: translateX(-100%);
        }
      }

      .animate-ticker {
        animation: ticker 10s linear infinite;
      }

      .animate-ticker:hover {
        animation-play-state: paused;
      }

      .card-body {
        transition: transform 0.3s ease-in-out;
      }

      .draggable-card {
        transition:
          top 0.3s ease,
          left 0.3s ease;
        position: absolute;
      }
    </style>

    {% include scripts.html %}
  </head>

  <body>
    {% assign showDonation = false %} 
    {% assign showKeyboardModal = false %}
    {%assign showMiddleBadge = false %} 
    {% include header.liquid %}

  <main id="main-content" class="min-h-screen flex flex-col items-center justify-center p-6">
    <div id="app" class="w-full flex flex-col items-center">
      <h1 class="text-4xl font-bold mb-4">üéØ Tic-Tac-Toe</h1>

      <div class="text-lg font-medium mb-2">
        {% raw %}   Score ‚Äî {{  emojiThemes[this.themeIndex].X }}: {{ score.X }} {{emojiThemes[this.themeIndex].O}}: {{ score.O }} {{  }} {% endraw %}
      </div>
      <button @click="toggleEmojiTheme" class="btn touch-manipulation btn-sm btn-outline mb-4">Toggle Emoji Theme</button>


  <div class="mb-4 flex flex-col items-center space-y-2">
        <div class="flex gap-2">
          <button @click="createGame" class="btn touch-manipulation btn-sm btn-accent">Create Game</button>
          <button @click="connectToPeer" class="btn touch-manipulation btn-sm btn-secondary">Join Game</button>
        </div>
        <input v-model="peerIdToConnect" placeholder="Enter game ID" class="input input-bordered w-full max-w-xs" />
        <div v-if="peerId" class="text-sm text-gray-500 cursor-pointer" @click="copyPeerIdToClipboard">
           {% raw %}      Your Game ID: <code>{{ peerId }}</code> (click to copy) {% endraw %}
        </div>
        <div v-if="toast" class="alert alert-info mt-2 w-full max-w-xs">
           {% raw %}      {{ toast }} {% endraw %}
        </div>
      </div>

      <div class="grid grid-cols-3 gap-4 mb-4">
      <button
          v-for="(cell, index) in cells"
          :key="index"
          @click="makeMove(index)"
          class="btn touch-manipulation btn-lg w-24 h-24 text-3xl font-bold transition-transform duration-200 hover:scale-105"
          :class="{ 'bg-green-100 animate-pulse': winner && winningCombo.includes(index), 'cursor-not-allowed opacity-50': !isMyTurn }"
          :disabled="!isMyTurn || cell"
        >
         {% raw %}    {{ getEmoji(cell) }} {% endraw %}
        </button>
      </div>

      <div class="text-lg mb-4">
         <span v-if="winner">üèÜ Player    {% raw %} {{ getEmoji(winner) }} {%endraw %}wins!</span>
        <span v-else-if="isDraw">ü§ù It's a draw!</span>
        <span v-else>Current Player:    {% raw %} {{ getEmoji(currentPlayer) }} {%endraw %}</span>
      </div>

      <button @click="resetGame" class="btn touch-manipulation btn-primary">Restart Game</button>
    </div>
  </main>


   <script>
    var app = Vue.createApp({
      data() {
        return {
          cells: Array(9).fill(null),
          currentPlayer: 'X',
          winner: null,
          isDraw: false,
          winningCombo: [],
          score: { X: 0, O: 0 },
          emojiThemes: [
            { X: '‚ùå', O: '‚≠ï' },
            { X: 'üê∂', O: 'üê±' },
            { X: 'üçï', O: 'üçî' },
            { X: 'ü¶Ñ', O: 'üêâ' }
          ],
          themeIndex: 0,
          peer: null,
          conn: null,
          peerId: '',
          peerIdToConnect: '',
          isHost: false,
          toast: ''
        };
      },
      computed: {
        emojiSet() {
          return this.emojiThemes[this.themeIndex];
        },
        isMyTurn() {
          if (!this.conn) return true; // single player or waiting
          return (this.isHost && this.currentPlayer === 'X') || (!this.isHost && this.currentPlayer === 'O');
        }
      },
      methods: {
        getEmoji(val) {
          return this.emojiSet[val] || '';
        },
        toggleEmojiTheme() {
          this.themeIndex = (this.themeIndex + 1) % this.emojiThemes.length;
        },
        showToast(msg) {
          this.toast = msg;
          setTimeout(() => this.toast = '', 3000);
        },
        copyPeerIdToClipboard() {
          navigator.clipboard.writeText(this.peerId).then(() => this.showToast('Game ID copied!'));
        },
        createGame() {
          this.isHost = true;
          this.peer = new Peer();
          this.peer.on('open', id => {
            this.peerId = id;
            this.showToast('Game created! Share the ID.');
          });
          this.peer.on('connection', connection => {
            this.conn = connection;
            this.setupConnection();
            this.showToast('Player joined the game!');
          });
        },
        connectToPeer() {
          this.isHost = false;
          this.peer = new Peer();
          this.peer.on('open', () => {
            this.conn = this.peer.connect(this.peerIdToConnect);
            this.conn.on('open', () => {
              this.setupConnection();
              this.showToast('Connected to host!');
            });
          });
        },
        setupConnection() {
          this.conn.on('data', data => {
            if (data.type === 'move') {
              this.cells = data.cells;
              this.currentPlayer = data.currentPlayer;
              this.winner = data.winner;
              this.isDraw = data.isDraw;
              this.winningCombo = data.winningCombo;
              this.score = data.score;
            } else if (data.type === 'reset') {
              this.resetGame(false);
            }
          });
        },
        makeMove(index) {
          if (this.cells[index] || this.winner || this.isDraw || !this.isMyTurn) return;
          this.cells[index] = this.currentPlayer;
          this.checkGameState();
          if (!this.winner && !this.isDraw) {
            this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';
          }
          this.sendUpdate();
        },
        checkGameState() {
          const wins = [
            [0,1,2],[3,4,5],[6,7,8],
            [0,3,6],[1,4,7],[2,5,8],
            [0,4,8],[2,4,6]
          ];
          for (let combo of wins) {
            const [a,b,c] = combo;
            if (this.cells[a] && this.cells[a] === this.cells[b] && this.cells[a] === this.cells[c]) {
              this.winner = this.cells[a];
              this.winningCombo = combo;
              this.score[this.winner]++;
              return;
            }
          }
          if (!this.cells.includes(null)) {
            this.isDraw = true;
          }
        },
        resetGame(sync = true) {
          this.cells = Array(9).fill(null);
          this.currentPlayer = 'X';
          this.winner = null;
          this.isDraw = false;
          this.winningCombo = [];
          if (sync && this.conn?.open) {
            this.conn.send({ type: 'reset' });
          }
        },
        sendUpdate() {
          if (this.conn?.open) {
            this.conn.send({
              type: 'move',
              cells: this.cells,
              currentPlayer: this.currentPlayer,
              winner: this.winner,
              isDraw: this.isDraw,
              winningCombo: this.winningCombo,
              score: this.score
            });
          }
        }
      }
    }).mount('#app');
  </script>
    {% include modals.liquid %} 
    {% include footer.liquid %}
  </body>
</html>
