<!DOCTYPE html>
<html
  class="brand-color-background scroll-smooth antialiased"
  lang="en"
  data-theme="light"
>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>
      Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee &
      Fun LLC
    </title>
    <meta
      name="description"
      content="Coco's Trivia Corner offers over 53,000 unique and random questions to keep you entertained. Perfect for quizzes, game nights, or just challenging yourself!"
    />
    <meta name="author" content="Coffee & Fun LLC" />
    <meta name="robots" content="index, follow" />
    <meta name="rating" content="safe for kids" />

    <link rel="icon" href="/assets/images/favicon.png" />

    <meta
      name="title"
      content="Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee & Fun LLC"
    />
    <!-- PWA Manifest -->
    <link rel="manifest" href="/assets/images/social/site.webmanifest" />

    <!-- Theme & Mobile Meta -->
    <meta name="theme-color" content="#fef5ec" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />

    <!-- Icons -->
    <link rel="apple-touch-icon" href="/assets/images/social/192.png" />
    <link
      rel="icon"
      href="/assets/images/social/192.png"
      sizes="192x192"
      type="image/png"
    />
    <!-- PWA Meta Tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <meta name="mobile-web-app-capable" content="yes" />

    <!-- Open Graph Meta Tags -->
    <meta
      property="og:title"
      content="Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee & Fun LLC"
    />
    <meta property="og:site_name" content="Coffee & Fun" />
    <meta property="og:url" content="https://www.coffeeandfun.com/" />
    <meta
      property="og:description"
      content="Coco's Trivia Corner offers over 53,000 unique and random questions to keep you entertained. Perfect for quizzes, game nights, or just challenging yourself!"
    />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/assets/images/apps/coco.png" />

    <!-- Twitter Meta Tags -->
    <meta property="twitter:domain" content="coffeeandfun.com" />
    <meta property="twitter:url" content="https://www.coffeeandfun.com" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta
      name="twitter:title"
      content="Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee & Fun LLC"
    />
    <meta name="twitter:site" content="@bycoffeeandfun" />
    <meta
      name="twitter:description"
      content="Coco's Trivia Corner offers over 53,000 unique and random questions to keep you entertained. Perfect for quizzes, game nights, or just challenging yourself!"
    />
    <meta
      name="twitter:image"
      content="https://www.coffeeandfun.com/assets/images/apps/coco.png"
    />
    <meta name="twitter:image:alt" content=" Coffee & Fun" />

    <script type="application/ld+json">
      {
        "@context": "http://schema.org/",
        "@type": "WebSite",
        "url": "https://www.coffeeandfun.com",
        "potentialAction": {
          "@type": "SearchAction",
          "target": "{search_term_string}",
          "query-input": "required name=search_term_string"
        }
      }
    </script>
    {% bundledCss %}

    <style>
  [v-cloak] { display: none; }
</style>
    <script>
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker.getRegistrations().then((registrations) => {
          for (const registration of registrations) {
            registration.unregister().then(() => {
              console.log("🧹 Old service worker unregistered");
            });
          }

          // After clearing, register the new one
          navigator.serviceWorker
            .register("/service-worker.js")
            .then(() => console.log("✅ New service worker registered"))
            .catch((err) => console.log("Service worker error:", err));
        });
      }
    </script>

    <script src="https://unpkg.com/vue@3"></script>
    <script src="https://unpkg.com/hotkeys-js/dist/hotkeys.min.js"></script>

    <script>
      if ("serviceWorker" in navigator) {
        navigator.serviceWorker.register("/service-worker.js");
      }
    </script>

    <style>
      @keyframes ticker {
        0% {
          transform: translateX(100%);
        }

        100% {
          transform: translateX(-100%);
        }
      }

      .animate-ticker {
        animation: ticker 10s linear infinite;
      }

      .animate-ticker:hover {
        animation-play-state: paused;
      }

      .card-body {
        transition: transform 0.3s ease-in-out;
      }

      .draggable-card {
        transition:
          top 0.3s ease,
          left 0.3s ease;
        position: absolute;
      }
    </style>

    {% include scripts.html %}
  </head>

  <body>
    {% assign showDonation = false %} 
    {% assign showKeyboardModal = false %}
    {%assign showMiddleBadge = false %} 
    {% include header.liquid %}

    <main v-cloak  id="main-content" class="mx-auto max-w-7xl mb-12 p-6">
      <img
        src="{{ '/assets/images/trivia.png' | asset_url }}"
        alt="…"
        class="mx-auto mb-6"
        width="170"
        height="255"
      />
      <div v-if="isLoading" class="max-w-md mx-auto skeleton h-full"></div>

      <div
        v-else
        class="card max-w-md mx-auto bg-base-200 shadow-lg rounded-2xl p-6"
      >
        <!-- QUESTION -->
        {% raw %}
        <h2 v-if="!quizFinished" class="text-2xl font-bold mb-4 text-center">
          {{ currentQuestion.question }}
        </h2>
        {% endraw %}

        <!-- in your template -->
        <!-- OPTIONS -->
        <div v-if="!quizFinished" class="grid grid-cols-1 gap-4 mb-6 mt-12">
          <button
            v-for="(opt, idx) in currentQuestion.options"
            :key="idx"
            @click="selectOption(idx)"
             @keyup.enter="selectOption(idx)"
          @touchstart.prevent.stop
          @touchmove.prevent.stop
          @touchcancel.prevent.stop
          @touchend="selectOption(idx)"
            class="btn btn-outline btn-lg lowercase first-letter:uppercase"
            :class="[
     
      answers[currentCardIndex] !== undefined
        ? ( idx === currentQuestion.options.indexOf(currentQuestion.answer)
            ? 'btn-success'
            : ( idx === answers[currentCardIndex] ? 'btn-error' : 'opacity-50 cursor-not-allowed' )
          )
        // 2) otherwise use a per-idx color
        : `btn-${optionColors[idx]}`
    ]"
            :disabled="answers[currentCardIndex] !== undefined"
          >
            {% raw %}{{ opt }}{% endraw %}
          </button>
        </div>

        <!-- NAVIGATION -->
        <div v-if="!quizFinished" class="flex justify-between">
          <button
            @click="prevQuestion"
                         @keyup.enter="prevQuestion"
          @touchstart.prevent.stop
          @touchmove.prevent.stop
          @touchcancel.prevent.stop
          @touchend="prevQuestion"
            class="btn btn-circle btn-soft btn-info"
            :disabled="currentCardIndex===0"
          >
            ◀
          </button>
          {% raw %}
          <span>Question {{ currentCardIndex+1 }}/{{ cards.length }}</span>
          {% endraw %}
          <button
            @click="nextQuestion"

                         @keyup.enter="nextQuestion"
          @touchstart.prevent.stop
          @touchmove.prevent.stop
          @touchcancel.prevent.stop
          @touchend="nextQuestion"
            class="btn btn-circle btn-soft btn-info"
            :disabled="answers[currentCardIndex]===undefined"
          >
            ▶
          </button>
        </div>

        <!-- SUMMARY -->
        <div v-if="quizFinished" class="w-full max-w-md mx-auto space-y-6">
          <h2 class="text-3xl font-extrabold text-center">Quiz Complete!</h2>
          <p class="text-center text-lg">
            Come back tomorrow for 10 more questions
          </p>
          <div class="divider my-4"></div>
          <!-- stats row -->
          <div class="flex justify-center items-center space-x-4">
            <span
              class="inline-flex items-center space-x-1 px-4 py-2 bg-success text-primary-content rounded-full font-semibold"
            >
              <span class="text-2xl">🟢</span>
              {% raw %}
              <span
                >Correct:
                <strong>{{ correctCount }}/{{ cards.length }}</strong></span
              >
              {% endraw %}
            </span>
            <span
              class="inline-flex items-center px-4 py-2 space-x-1 bg-info text-primary-content rounded-full font-semibold"
            >
              <span class="text-2xl">🔴</span>
              {% raw %}
              <span
                >Wrong: <strong>{{ cards.length - correctCount }}</strong></span
              >
              {% endraw %}
            </span>
          </div>
          <div class="flex justify-center items-center space-x-4">
            <!-- percentile badge -->
            <div class="text-center">
              <span
                class="inline-block px-4 py-2 bg-primary text-primary-content rounded-full font-semibold"
              >
                {% raw %} 📈 Top: {{ percentile }} {% endraw %}
              </span>
            </div>

            <!-- percentile badge -->
            <div class="text-center">
              <span
                class="inline-block px-4 py-2 bg-primary text-primary-content rounded-full font-semibold"
              >
                {% raw %} Rank: {{ rank }} {% endraw %}
              </span>
            </div>
          </div>

          <h3 class="text-2xl font-bold text-left mt-12">Results Breakdown</h3>

          <div class="divider my-4"></div>

          <!-- results row -->
          <div class="flex justify-center space-x-4 mt-4">
            <div
              v-for="r in results"
              :key="r.index"
              class="flex flex-col items-center"
            >
              <!-- circle -->
              <span
                class="text-2xl"
                :class="r.correct ? 'text-success' : 'text-error'"
                v-text="r.correct ? '🟢' : '🔴'"
              ></span>
              <!-- question number -->
              <span
                class="text-sm mt-1 text-base-content"
                v-text="r.index"
              ></span>
            </div>
          </div>

          <button
            @click="copyShareText"

                         @keyup.enter="copyShareText"
          @touchstart.prevent.stop
          @touchmove.prevent.stop
          @touchcancel.prevent.stop
          @touchend="copyShareText"
            class="btn btn-block btn-primary btn-lg font-bold"
          >
            SHARE YOUR SCORE
          </button>
        </div>
      </div>
    </main>

    <script>
      var app = Vue.createApp({
        data() {
          return {
            optionColors: ["primary", "secondary", "success", "info"],
            percentileTiers: {
              10: "1%",
              9: "5%",
              8: "10%",
              7: "25%",
              6: "50%",
            },
            isLoading: true,
            allQuestions: [],
            dailyQuestions: [],
            cards: [],
            currentCardIndex: 0,
            answers: [], // stores selected option index per question
            startTime: null,
            endTime: null,
            quizFinished: false,
            // tweakable bonus thresholds (in seconds)
            bonusConfig: {
              fast: { time: 60, bonus: 5 },
              medium: { time: 120, bonus: 2 },
            },
          };
        },
        computed: {
          score() {
            const basePoints = this.correctCount * 10;
            const timePenalty = Math.round(this.totalTime);
            return Math.max(0, basePoints - timePenalty);
          },
          rank() {
            if (this.score >= 80) return "🏆 Legend";
            if (this.score >= 50) return "🔥 Hotshot";
            if (this.score >= 20) return "👍 Good";
            return "😂 Awful";
          },

          results() {
            return this.answers.map((sel, i) => ({
              correct: this.cards[i].options[sel] === this.cards[i].answer,
              index: i + 1,
            }));
          },
          circles() {
            return this.results.map((r) => (r.correct ? "🟢" : "🔴")).join("");
          },

          percentile() {
            if (!this.cards.length) return "—";
            // What % of players you’ve beaten = (your score/total)*100
            const beatPct = Math.round(
              (this.correctCount / this.cards.length) * 100,
            );
            // “Top” is the complement: e.g. score 4/10 → beat 40% → you’re top 60%
            const topPct = 100 - beatPct;
            return `${topPct}%`;
          },
          percentileEmoji() {
            // give a trophy for top 1%
            return this.percentile === "1%" ? "🏆" : "";
          },
          today() {
            return new Date().toLocaleDateString("en-US", {
              month: "short",
              day: "numeric",
            }); // e.g. “May 30”
          },
          currentQuestion() {
            return this.cards[this.currentCardIndex];
          },
          totalTime() {
            if (!this.endTime || !this.startTime) return 0;
            return Math.round((this.endTime - this.startTime) / 1000);
          },
          bonus() {
            if (!this.quizFinished) return 0;
            if (this.totalTime <= this.bonusConfig.fast.time)
              return this.bonusConfig.fast.bonus;
            if (this.totalTime <= this.bonusConfig.medium.time)
              return this.bonusConfig.medium.bonus;
            return 0;
          },
          correctCount() {
            return this.answers.filter(
              (sel, i) => this.cards[i].options[sel] === this.cards[i].answer,
            ).length;
          },

          shareText() {
            // e.g. “✏️ Daily 10 – May 30\nScore: 7/10”
            return [
              `✏️ 10 Daily Trivia  – ${this.today}`,
              `Top ${this.percentile} ${this.percentileEmoji}`,
              `Correct: ${this.correctCount}/${this.cards.length}`,
              `Score: ${this.score}`,
              this.rank,
            ].join("\n");
          },
       
        },
        mounted() {
          this.initQuiz();
        },
        methods: {
          copyShareText() {
            navigator.clipboard.writeText(this.shareText).then(() => {
              // you can swap in your favorite toast here
              alert("Copied to clipboard!");
            });
          },
          initQuiz() {
            fetch("/assets/js/trivia_options.json")
              .then((r) => r.json())
              .then((data) => {
                this.allQuestions = data.questions;
                console.table(this.allQuestions.slice(0, 5)); // log first 5 for debugging
                console.log(`Loaded ${this.allQuestions.length} questions`);
                this.setupDaily();
                this.loadState();
              })
              .catch(console.error);
          },

          // 1) Pick a deterministic 10 for today & store in localStorage
          setupDaily() {
            const today = new Date().toISOString().slice(0, 10);
            if (localStorage.getItem("dailyDate") !== today) {
              // new day → clear old quiz
              ["dailyDate", "dailyQuestions", "quizState"].forEach((k) =>
                localStorage.removeItem(k),
              );
              localStorage.setItem("dailyDate", today);
            }
            let dq = JSON.parse(localStorage.getItem("dailyQuestions"));
            if (!dq) {
              dq = this.pickDailyQuestions(10);
              localStorage.setItem("dailyQuestions", JSON.stringify(dq));
            }
            this.dailyQuestions = dq;
          },
          pickDailyQuestions(count) {
            const dateNum = parseInt(
              new Date().toISOString().slice(0, 10).replace(/-/g, ""),
              10,
            );
            return this.allQuestions
              .map((q, i) => {
                // simple sin-based seed for pseudo-random sortKey
                const seed = i + dateNum;
                const rnd = Math.sin(seed) * 10000;
                return { q, key: rnd - Math.floor(rnd) };
              })
              .sort((a, b) => a.key - b.key)
              .slice(0, count)
              .map((obj) => ({
                ...obj.q,
                options: this.shuffle(obj.q.options), // randomize order
              }));
          },
          shuffle(arr) {
            return arr.slice().sort(() => Math.random() - 0.5);
          },

          // 2) load or start quizState
          loadState() {
            const today = localStorage.getItem("dailyDate");
            const st = JSON.parse(localStorage.getItem("quizState") || "null");
            if (st && st.date === today) {
              this.cards = this.dailyQuestions;
              this.currentCardIndex = st.currentCardIndex;
              this.answers = st.answers;
              this.startTime = st.startTime;
              if (st.finished) {
                this.endTime = st.endTime;
                this.quizFinished = true;
              }
            } else {
              this.cards = this.dailyQuestions;
              this.currentCardIndex = 0;
              this.answers = [];
              this.startTime = Date.now();
              this.quizFinished = false;
              this.saveState();
            }
            this.isLoading = false;
          },
          saveState() {
            const st = {
              date: localStorage.getItem("dailyDate"),
              currentCardIndex: this.currentCardIndex,
              answers: this.answers,
              startTime: this.startTime,
              endTime: this.endTime,
              finished: this.quizFinished,
            };
            localStorage.setItem("quizState", JSON.stringify(st));
          },

          // 3) user picks an option
          selectOption(idx) {
            if (
              this.quizFinished ||
              this.answers[this.currentCardIndex] != null
            )
              return;

            // Vue 3 will track this just fine:

            if (this.answers.length <= this.currentCardIndex) {
              this.answers.push(idx);
            } else {
              this.answers[this.currentCardIndex] = idx;
            }
            this.saveState();
            // auto-advance after they see feedback
            setTimeout(this.nextQuestion, 600);
          },

          nextQuestion() {
            if (this.currentCardIndex < this.cards.length - 1) {
              this.currentCardIndex++;
            } else {
              this.finishQuiz();
            }
            this.saveState();
          },
          prevQuestion() {
            if (this.currentCardIndex > 0) {
              this.currentCardIndex--;
              this.saveState();
            }
          },

          finishQuiz() {
            this.endTime = Date.now();
            this.quizFinished = true;
            this.saveState();
          },

          copyShareText() {
            navigator.clipboard.writeText(this.shareText).then(() => {
              alert("Copied to clipboard!");
            });
          },
        },
      }).mount("#main-content");
    </script>

    {% include modals.liquid %} 
    {% include footer.liquid %}
  </body>
</html>
