<!DOCTYPE html>
<html class="brand-color-background scroll-smooth antialiased" lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee & Fun LLC</title>
    <meta name="description"
        content="Coco's Trivia Corner offers over 53,000 unique and random questions to keep you entertained. Perfect for quizzes, game nights, or just challenging yourself!" />
    <meta name="author" content="Coffee & Fun LLC" />
    <meta name="robots" content="index, follow" />
    <meta name="rating" content="safe for kids" />

    <link rel="icon" href="/assets/images/favicon.png" />

    <meta name="title" content="Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee & Fun LLC" />
    <link rel="manifest" href="/assets/images/social/site.webmanifest" />
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee & Fun LLC" />
    <meta property="og:site_name" content="Coffee & Fun" />
    <meta property="og:url" content="https://www.coffeeandfun.com/" />
    <meta property="og:description"
        content="Coco's Trivia Corner offers over 53,000 unique and random questions to keep you entertained. Perfect for quizzes, game nights, or just challenging yourself!" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/assets/images/apps/coco.png" />

    <!-- Twitter Meta Tags -->
    <meta property="twitter:domain" content="coffeeandfun.com" />
    <meta property="twitter:url" content="https://www.coffeeandfun.com" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Coco's Trivia Corner: Explore 53,000+ Fun and Random Questions - Coffee & Fun LLC" />
    <meta name="twitter:site" content="@bycoffeeandfun" />
    <meta name="twitter:description"
        content="Coco's Trivia Corner offers over 53,000 unique and random questions to keep you entertained. Perfect for quizzes, game nights, or just challenging yourself!" />
    <meta name="twitter:image" content="https://www.coffeeandfun.com/assets/images/apps/coco.png" />
    <meta name="twitter:image:alt" content=" Coffee & Fun" />

    <script type="application/ld+json">
        {
            "@context": "http://schema.org/",
            "@type": "WebSite",
            "url": "https://www.coffeeandfun.com",
            "potentialAction": {
                "@type": "SearchAction",
                "target": "{search_term_string}",
                "query-input": "required name=search_term_string"
            }
        }
    </script>
    {% bundledCss %}

    <script src="https://unpkg.com/vue@3"></script>
    <script src="https://unpkg.com/hotkeys-js/dist/hotkeys.min.js"></script>

    <script>
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/service-worker.js');
        }
    </script>

<style>
    @keyframes ticker {
        0% {
            transform: translateX(100%);
        }

        100% {
            transform: translateX(-100%);
        }
    }

    .animate-ticker {
        animation: ticker 10s linear infinite;
    }

    .animate-ticker:hover {
        animation-play-state: paused;
    }

    .card-body {
        transition: transform 0.3s ease-in-out;
    }

    .draggable-card {
        transition: top 0.3s ease, left 0.3s ease;
        position: absolute;
    }
</style>


{% include scripts.html %}
</head>

<body>
    {% assign showDonation = false %}
    {% assign showKeyboardModal = true %}
    {%assign showMiddleBadge = true %}
    {% include header.liquid %}



    <main id="main-content" class="mx-auto max-w-7xl mb-12">


    <div class="flex flex-col items-center min-h-screen  p-6">
        <!-- Logo -->


      



        <div class="mx-auto max-w-7xl lg:px-8">
            <div class="mx-auto grid max-w-xl grid-cols-1">
                <div class="text-base  lg:col-span-8">
                    <div class="p-4 h-fit mx-auto w-full items-center ">


                        <article class="text-base text-black mx-auto">

        

                            <div
                                class="card flex card-compact my-8 bg-base-100 shadow-md  w-full sm:w-96 mt-8 min-h-[500px] mx-auto">
                                <div class="card-body flex flex-col h-full" @touchstart="touchStart"
                                    @touchend="touchEnd">
                                    <div v-if="isQuestionsEmpty === true">
                                        <div class="flex flex-col gap-4">
                                            <div class="skeleton bg-base-200 h-24 w-full" :class="
                                                    [
                                                        {
                                                          'animate-none': isLoading === false,
                                                        },
                                                    ]">
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Question Section -->
                                    <h1 class="mb-4 font-bold card-title text-2xl text-center mx-auto"
                                        v-if="isQuestionsEmpty === false" 
                                        v-html="cards[currentCardIndex].question">
                                    </h1>

                                    <!-- Answer Section -->
                                    <div class="flex-grow flex items-center justify-center">
                                        <p v-if="isQuestionsEmpty === false"
                                            class="text-2xl text-center font-black text-red-500 "
                                            v-text="currentCardIndex === visibleCardIndex ? cards[currentCardIndex].answer : '**********'">

                                        </p>
                                    </div>

                                    <!-- Button at the Bottom -->
                                    <div class="mt-auto">
                                        <button 
                                            class="btn btn-lg btn-natural w-full h-16 flex justify-center items-center group grow rounded-full"
                                            aria-label="currentCardIndex !== visibleCardIndex ? 'Show Answer' : 'Hide Answer' "
                                            :class="{
                                                'btn-active': currentCardIndex === visibleCardIndex,
                                            }" @click="toggleAnswer" v-on:keyup.enter="toggleAnswer">
                                            <span
                                                v-text="currentCardIndex !== visibleCardIndex ? 'Show Answer' : 'Hide Answer' ">

                                            </span>
                                        </button>
                                    </div>
                                </div>
                            </div>




<div v-if="isQuestionsEmpty === false" class="join justify-between w-full mt-2">


<div class="tooltip" data-tip="Previous" id="prevTooltip">
                                    <button class="join-item btn btn-ghost btn-primary btn-circle btn-sm"
                                        aria-label="Previous question" aria-describedby="prevTooltip" @click="prevCard"
                                        v-on:keyup.enter="prevCard">
                                        ◀︎
                            
                            </button>
                                </div>

                                  <div v-for="(card, index) in cards" :key="card.id">
                                    <div class="tooltip" data-tip="Go to Question">
                                        <button class="join-item btn btn-ghost btn-circle btn-sm" :class="{
                                                    'btn-active': index === currentCardIndex
                                                }" @click="goToCard(index + 1)" v-on:keyup.enter="goToCard(index + 1)"
                                            aria-label="Go to Question" v-html="currentBatchStartIndex + index + 1">
                      
                                        </button>
                                    </div>
</div>

                                <div class="tooltip" data-tip="Next" id="nextTooltip">
                                    <button class="join-item btn btn-ghost btn-primary btn-circle btn-sm"
                                        aria-label="Next question" aria-describedby="nextTooltip" @click="nextCard"
                                        v-on:keyup.enter="nextCard">
                                        ▶︎
                                    </button>
                                </div>
                            </div>


                      
</div>
                        </article>
                    </div>
                </div>
            </div>
        </div>



    </main>




    <script>
        var app = Vue.createApp({
            data() {
                return {
                    isLoading: true,
                    cards: [],
                    allQuestions: [], // Store all questions here
                    currentCardIndex: 0,
                    currentBatchStartIndex: 0,
                    visibleCardIndex: -1,
                    skelectionLimit: 6,
                    batchSize: 6, // Adjust to your desired batch size
                    touchStartX: 0,
                    touchEndX: 0,
                    totalQuestions: 53000 // Adjust to your actual number
                }
            },
            computed: {
                isQuestionsEmpty() {
                    return this.cards.length === 0;
                },
            },
            async mounted() {
                this.loadAllQuestions();
                this.setKeyCommands();
            },
            methods: {
             
                touchStart(event) {
                    // Capture the X coordinate where the touch started
                    this.touchStartX = event.changedTouches[0].screenX;
                },
                touchEnd(event) {
                    // Capture the X coordinate where the touch ended
                    this.touchEndX = event.changedTouches[0].screenX;
                    this.handleSwipeGesture();
                },
                handleSwipeGesture() {
                    const swipeDistance = this.touchStartX - this.touchEndX;

                    if (swipeDistance > 50) {
                        // Swipe left detected
                        this.onSwipeRight();
                    } else if (swipeDistance < -50) {
                        // Swipe right detected
                        this.onSwipeLeft();
                    }
                },
                onSwipeLeft() {
                    // Handle swipe left action here

                    this.prevCard(); // Example: Go to the next card
                },
                onSwipeRight() {
                    // Handle swipe right action here

                    this.nextCard(); // Example: Go to the previous card
                },

                setKeyCommands() {
                    hotkeys("right", (event) => {
                        // Prevent the default refresh event under WINDOWS system
                        event.preventDefault();
                        this.nextCard();
                    });

                    hotkeys("left", (event) => {
                        // Prevent the default refresh event under WINDOWS system
                        event.preventDefault();
                        this.prevCard();
                    });

                    hotkeys("down", (event) => {
                        // Prevent the default refresh event under WINDOWS system
                        event.preventDefault();
                        this.toggleAnswer();
                    });

                    hotkeys("up", (event) => {
                        // Prevent the default refresh event under WINDOWS system
                        event.preventDefault();
                        this.toggleAnswer();
                    });
                },
                toggleAnswer() {
                    let showAnswer = this.visibleCardIndex === this.currentCardIndex;
                    this.visibleCardIndex = showAnswer ? -1 : this.currentCardIndex;
                },
                goToCard(number = 0) {
                    this.currentCardIndex = number - 1;
                },

                startDrag(event) {
                    this.isDragging = true;
                    const { clientX, clientY } = event.type.includes('mouse') ? event : event.touches[0];
                    this.startCoords.x = clientX - this.position.x;
                    this.startCoords.y = clientY - this.position.y;
                },
                // Function to drag the card
                drag(event) {
                    if (!this.isDragging) return;
                    const { clientX, clientY } = event.type.includes('mouse') ? event : event.touches[0];
                    this.position.x = clientX - this.startCoords.x;
                    this.position.y = clientY - this.startCoords.y;
                },
                // Function to end dragging with a "fall" effect
                endDrag() {
                    this.isDragging = false;
                    this.position.y += 150; // Apply a "fall" effect
                },

                prevCard() {
                    if (this.currentCardIndex > 0) {
                        this.currentCardIndex--;
                    } else if (this.currentCardIndex === 0 && this.cards[0].id > 1) {
                        const previousBatchStartIndex = Math.max(0, this.cards[0].id - this.batchSize - 1);
                        this.loadJSON(this.batchSize, previousBatchStartIndex);
                    }
                    this.visibleCardIndex = -1;

                },
                nextCard() {
                    if (this.currentCardIndex < this.cards.length - 1) {
                        this.currentCardIndex++;
                    } else if (this.currentCardIndex === this.cards.length - 1) {
                        const newStartIndex = this.cards[this.cards.length - 1].id;
                        this.loadJSON(this.batchSize, newStartIndex);
                    }
                    this.visibleCardIndex = -1;

            
                },


                loadAllQuestions() {
                    fetch('/assets/js/trivia.json')
                        .then(response => response.json())
                        .then(data => {
                            if (data.questions) {
                                // Shuffle the entire array of questions
                                this.allQuestions = this.shuffleArray(data.questions);
                                // Load the first batch of questions
                                this.loadJSON();
                            } else {
                                console.error('Invalid questions format:', data);
                            }
                        })
                        .catch(error => console.error('Error loading JSON:', error));
                },

                loadJSON(batchSize = this.batchSize, startIndex = 0) {
                    // Slice the array to get the current batch
                    let questions = this.allQuestions.slice(startIndex, startIndex + batchSize);
                    // Assign unique IDs to each question
                    this.cards = questions.map((question, index) => ({
                        ...question,
                        id: startIndex + index + 1
                    }));
                    this.currentBatchStartIndex = startIndex; // Update the current batch start index
                    this.currentCardIndex = 0; // Start at the first question of the new batch
                    this.isLoading = false;

                 
                },
                shuffleArray(array) {
                    for (let i = array.length - 1; i > 0; i--) {
                        const j = Math.floor(Math.random() * (i + 1));
                        [array[i], array[j]] = [array[j], array[i]]; // Swap elements
                    }
                    return array;
                }
            }
        });

        app.mount("#main-content");
    </script>

    {% include modals.liquid %}


    {% include footer.liquid %}



</body>

</html>