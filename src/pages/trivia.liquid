<!DOCTYPE html>
<html class="brand-color-background scroll-smooth antialiased" lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Trivia - Coffee & Fun.</title>
    <meta name="description"
        content="Discover the best coffees in the USA at Coffee & Fun. Uncover rich flavors and expert ratings for your perfect cup of Joe." />
    <meta name="author" content="Coffee & Fun LLC" />
    <meta name="robots" content="index, follow" />
    <meta name="rating" content="safe for kids" />

    <link rel="icon" href="/assets/images/favicon.png" />

    <meta name="title" content="Reviewing & Ranking every Coffee shop - Coffee & Fun" />

    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="Reviewing & Ranking every Coffee shop - Coffee & Fun" />
    <meta property="og:site_name" content="Coffee & Fun" />
    <meta property="og:url" content="https://www.coffeeandfun.com/" />
    <meta property="og:description"
        content="Discover the best coffees in the USA at Coffee & Fun. Uncover rich flavors and expert ratings for your perfect cup of Joe." />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/assets/images/social-icon.png" />

    <!-- Twitter Meta Tags -->
    <meta property="twitter:domain" content="coffeeandfun.com" />
    <meta property="twitter:url" content="https://www.coffeeandfun.com" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Reviewing & Ranking every Coffee shop - Coffee & Fun" />
    <meta name="twitter:site" content="@bycoffeeandfun" />
    <meta name="twitter:description"
        content="Discover the best coffees in the USA at Coffee & Fun. Uncover rich flavors and expert ratings for your perfect cup of Joe." />
    <meta name="twitter:image" content="https://www.coffeeandfun.com/assets/images/social-icon.png" />
    <meta name="twitter:image:alt" content=" Coffee & Fun" />

    <script type="application/ld+json">
        {
            "@context": "http://schema.org/",
            "@type": "WebSite",
            "url": "https://www.coffeeandfun.com",
            "potentialAction": {
                "@type": "SearchAction",
                "target": "{search_term_string}",
                "query-input": "required name=search_term_string"
            }
        }
    </script>
    {% bundledCss %}

    <script src="https://unpkg.com/vue@3"></script>

    <script>
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/service-worker.js');
        }
    </script>

    <style>
        .brand-color-background {
            background-color: #fef5ec;
        }

        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-size: 1.5rem;
            color: #333;
        }
    </style>
</head>

<body>

    {% include header.html %}


    <main id="main-content" class="mx-auto max-w-7xl mb-12">

        <div class="mx-auto max-w-7xl lg:px-8">

            <div class="mx-auto grid max-w-xl grid-cols-1">
                <div class="text-base  lg:col-span-8">

                    <div class="p-4 h-fit mx-auto w-full items-center ">
                        <div class="flex w-full">
                            <div class="mx-auto mb-4 mt-4">
                                <img alt="TriviaFlix" src="/assets/images/trivia.png" width="80" height="80"
                                    decoding="async" data-nimg="future" loading="lazy"
                                    class="aspect-square mx-auto block" />


                            </div>
                        </div>

                        <article class="mt-8 text-base text-black mx-auto">
                            <div class="card flex card-compact my-8 bg-base-100 shadow-md  w-full sm:w-96 mt-8 min-h-[340px] mx-auto">
                                <div class="card-body flex flex-col h-full">
                                    <div v-if="isQuestionsEmpty === true">
                                        <div class="flex flex-col gap-4">
                                            <div class="skeleton bg-base-200 h-24 w-full" :class="[
                                                        {
                                                          'animate-none': isLoading === false,
                                                        },
                                                      ]"></div>
                                        </div>
                                    </div>
                            
                                    <!-- Question -->
                                    <h2 class="mb-4 font-bold card-title text-center" v-if="isQuestionsEmpty === false"
                                        v-html="cards[currentCardIndex].question">
                                    </h2>
                            
                                    <!-- Answer Section -->
                                    <div class="flex-grow flex items-center justify-center">
                                        <p v-if="isQuestionsEmpty === false"
                                          class="text-xl text-center font-black text-red-500 transition-opacity duration-300 ease-in-out"
                                           v-text="currentCardIndex === visibleCardIndex ? cards[currentCardIndex].answer : '**********'">
                                        </p>
                            
                                        
                                    </div>
                            
                                    <!-- Button at the Bottom -->
                                    <div class="mt-auto">
                                        <button v-if=""
                                            class="btn btn-lg btn-natural w-full h-16 flex justify-center items-center"
                                            :class="{
                                            'btn-active': currentCardIndex === visibleCardIndex,
                                            }"
                                            @click="toggleAnswer"
                                            v-on:keyup.enter="toggleAnswer">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" class="w-5 h-5" fill="currentColor">
                                                <path
                                                    d="M480-320q75 0 127.5-52.5T660-500q0-75-52.5-127.5T480-680q-75 0-127.5 52.5T300-500q0 75 52.5 127.5T480-320Zm0-72q-45 0-76.5-31.5T372-500q0-45 31.5-76.5T480-608q45 0 76.5 31.5T588-500q0 45-31.5 76.5T480-392Zm0 192q-146 0-266-81.5T40-500q54-137 174-218.5T480-800q146 0 266 81.5T920-500q-54 137-174 218.5T480-200Zm0-300Zm0 220q113 0 207.5-59.5T832-500q-50-101-144.5-160.5T480-720q-113 0-207.5 59.5T128-500q50 101 144.5 160.5T480-280Z"/>
                                            </svg>
                                            <span v-text="currentCardIndex !== visibleCardIndex ? 'Show Answer' : 'Hide Answer' "></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            
                            <div v-if="isQuestionsEmpty === false" class="join justify-between w-full mt-6">

                                <button class="join-item btn btn-ghost btn-primary btn-circle btn-sm" @click="prevCard"
                                    v-on:keyup.enter="prevCard">
                                    ◀︎
                                </button>



                                <button v-for="(card, index) in cards" :key="card.id"
                                    class="join-item btn btn-ghost btn-circle btn-sm" :class="{
                                            'btn-active': index === currentCardIndex,
                                        }" @click="goToCard(index + 1)" v-on:keyup.enter="goToCard(index + 1)"
                                    v-html="currentBatchStartIndex + index + 1">
                                </button>


                                <button class="join-item btn btn-ghost btn-primary btn-circle btn-sm" @click="nextCard"
                                    v-on:keyup.enter="nextCard">
                                    ▶︎
                                </button>
                            </div>
                        </article>
                    </div>

                </div>
            </div>

        </div>

    </main>




    <script>
        var app = Vue.createApp({
            data() {
                return {
                    isLoading: true,
                    cards: [],
                    currentCardIndex: 0,
                    visibleCardIndex: -1,
                    skelectionLimit: 6,
                    batchSize: 8,
                    totalQuestions: 53000, // Adjust to your actual number
                    currentBatchStartIndex: 0 // Track the start index of the current batch
                }
            },
            computed: {
                isQuestionsEmpty() {
                    return this.cards.length === 0;
                },
            },
            async mounted() {
                this.loadJSON();
            },
            methods: {
                toggleAnswer() {
                    let showAnswer = this.visibleCardIndex === this.currentCardIndex;
                    this.visibleCardIndex = showAnswer ? -1 : this.currentCardIndex;
                },
                goToCard(number = 0) {
                    this.currentCardIndex = number - 1;
                },
                prevCard() {
                    if (this.currentCardIndex > 0) {
                        this.currentCardIndex--;
                    } else if (this.currentCardIndex === 0 && this.cards[0].id > 1) {
                        const previousBatchStartIndex = Math.max(0, this.cards[0].id - this.batchSize - 1);
                        this.loadJSON(this.batchSize, previousBatchStartIndex);
                    }
                    this.visibleCardIndex = -1;
                },
                nextCard() {
                    if (this.currentCardIndex < this.cards.length - 1) {
                        this.currentCardIndex++;
                    } else if (this.currentCardIndex === this.cards.length - 1) {
                        const newStartIndex = this.cards[this.cards.length - 1].id;
                        this.loadJSON(this.batchSize, newStartIndex);
                    }
                    this.visibleCardIndex = -1;
                },
                loadJSON(batchSize = this.batchSize, startIndex = 0) {
                    fetch('/assets/js/trivia.json')
                        .then(response => response.json())
                        .then(data => {
                            if (data.questions) {
                                // Slice the array to get the batch, then shuffle it
                                let questions = data.questions.slice(startIndex, startIndex + batchSize);
                                questions = this.shuffleArray(questions);
                                // Assign unique IDs to each question
                                this.cards = questions.map((question, index) => ({
                                    ...question,
                                    id: startIndex + index + 1
                                }));
                                this.currentBatchStartIndex = startIndex; // Update the current batch start index
                                this.currentCardIndex = 0; // Start at the first question of the new batch
                                this.isLoading = false;
                            } else {
                                console.error('Invalid questions format:', data);
                            }
                        })
                        .catch(error => console.error('Error loading JSON:', error));
                },
                shuffleArray(array) {
                    for (let i = array.length - 1; i > 0; i--) {
                        const j = Math.floor(Math.random() * (i + 1));
                        [array[i], array[j]] = [array[j], array[i]]; // Swap elements
                    }
                    return array;
                }
            }
        });

        app.mount("#main-content");
    </script>

    {% include modals.html %}



</body>

</html>